/*
		Ehemaliges Cleared to Land Script
		Ersteller: Padarom
		Mapper: r0ck4ff3

	Wer das Script als sein eigen ausgibt oder es in anderen Foren
	bzw. Websites ohne Padaroms Genehmigung zum Download anbietet,
	muss mit rechtlichen Konsequenzen rechnen.

	Bitte beachten:
	    MySQL-Daten müssen in Zeile 30-33
		ausgefüllt werden.
*/

#include <a_samp>
#include <dini>
#include <sscanf2>
#include <mysql>

#define dcmd(%1,%2,%3) if (!strcmp((%3)[1], #%1, true, (%2)) && ((((%3)[(%2) + 1] == '\0') && (dcmd_%1(playerid, ""))) || (((%3)[(%2) + 1] == ' ') && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1

// Sonstiges
#define PLAYER_PATH "/spieler/%s.ini"
#define TANKTIMER 20000
#define TACHOTIMER 1000
#define CAR_LIMIT 19

#define MAX_CARS 300 		// Maximale Fahrzeuge
#define SQL_HOST   ""       // Hostname
#define SQL_USER   ""       // Username
#define SQL_PASS   ""       // Passwort
#define SQL_DATA   ""       // Datenbank-Name

forward LoadCars();
forward OpenTicket(adminid, targetid);
forward CreateCar(id, c1, c2, Float:x, Float:y, Float:z, Float:a, plate[]);
forward BenzinVerlust();
forward Auftanken();
forward StartFlug(playerid, bool:gross, ziel);
forward TimeTimer();
forward WeatherTimer();
forward RandomEx(min, max);
forward IsPlayerInRangeOfVehicleModel(playerid, Float:range, vehiclemodel);
forward GivePlayerReward(playerid, money, score);
forward PrepareTextDraws(playerid);
forward AchievementShowTimer(playerid);
forward ShowAchievement(playerid, title[], description[], rewardtext[], rewardmoney, rewardscore);
forward points();
forward Reward(playerid);
forward fcreate(filename[]);

// Dialoge
#define changename 1
#define lostpw 2
#define login 3
#define register1 4
#define register2 5
#define register3 6
#define tut1 7
#define tut2 8
#define tut3 9
#define tut4 10
#define tut5 11
#define tut6 12
#define pwchange 13
#define airports 14
#define adminlist 15
#define tempban 16
#define regeln1 17
#define regeln2 18
#define info 19
#define help1 20
#define help2 21
#define help3 22
#define help4 23
#define help5 24
#define help6 25
#define help7 26
#define help8 27
#define changefrak 28
#define flug 29
#define atcpos 30
#define camdia 31
#define airportsel 32
#define ticketdia1 33
#define ticketdia2 34

// Farben
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_DARKRED 0x660000AA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_ORANGE 0xFF9900AA
#define COLOR_PINK 0xFF66FFAA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_CYAN 0x00BFF3AA
#define COLOR_BLACK 0x000000AA
#define COLOR_BROWN 0XA52A2AAA
#define COLOR_GOLD 0x00C3FFFF
#define COLOR_INDIGO 0x4B00B0AA
#define COLOR_LAWNGREEN 0x7CFC00AA
#define COLOR_LIMEGREEN 0x32CD32AA
#define COLOR_OLIVE 0x808000AA
#define COLOR_SEAGREEN 0x2E8B57AA
#define COLOR_TOMATO 0xFF6347AA
#define COLOR_YELLOWGREEN 0x9ACD32AA
#define COLOR_MEDIUMAQUA 0x83BFBFAA
#define COLOR_FLBLUE 0x6495EDAA
#define COLOR_MAGENTA 0xFF00FFFF
#define COLOR_PURPLE 0x800080AA
#define COLOR_GRELLRED 0xFF000000
#define COLOR_LIGHTGREEN 0x86FF59FF
#define COLOR_LIGHTBLUE 0x33CCFFAA

// Menü
new Menu[MAX_PLAYERS];
new Text:Welcomeeins, Text:Welcomezwei, Text:Welcomedrei, Text:Welcomefo, Text:Welcomesz, Text:Welcomesd;
new Keys[MAX_PLAYERS], lr[MAX_PLAYERS], ud[MAX_PLAYERS];

// Fahrzeuge
new engine,lights,alarm,doors,bonnet,boot,objective;
new Text:inhalt[MAX_PLAYERS], Text:speed[MAX_PLAYERS], Text:kmstand[MAX_PLAYERS], Text:repair[MAX_PLAYERS], Text:motor[MAX_PLAYERS];
new Text:vehiclename[MAX_PLAYERS], bool:Motor[MAX_VEHICLES] = false, bool:Licht[MAX_VEHICLES] = false;
new Text:callsign[MAX_PLAYERS], call[MAX_VEHICLES][256], MaxTank[MAX_VEHICLES];

// Tanken
new Tank[MAX_VEHICLES], bool:TanktGerade[MAX_VEHICLES]=false, TankZiel[MAX_VEHICLES], bool:WirdBetankt[MAX_VEHICLES]=false;

// Flug
new bool:gatebelegt[11]=false, flughafen[MAX_VEHICLES][256], bool:ImFlug[MAX_PLAYERS], flugziel[MAX_PLAYERS];

// ATC
new gate[MAX_VEHICLES]=0, cp[MAX_PLAYERS], time=10, bool:IsATC[MAX_PLAYERS]=false, ATCPos[MAX_PLAYERS]=0;
new bool:atcbelegt[7]=false;

// Achievements
new Text:atitle[MAX_PLAYERS], Text:adescription[MAX_PLAYERS], Text:areward[MAX_PLAYERS];

new Text3D:anzeige[MAX_PLAYERS];
new BodenReward[MAX_PLAYERS]=0;

new vehicleData[][3]={
{407, 100,  100},
{416, 100,  100},
{599, 100,  100},
{490, 100,  100},
{485, 50,   50},
{514, 100,  100},
{584, 1000, 1000},
{593, 200,  100},
{511, 600,  300},
{553, 500,  400},
{519, 600,  300},
{577, 1000, 200},
{592, 1200, 500},
{460, 200,  100},
{487, 200,  50},
{469, 180,  80},
{417, 400,  100},
{552, 100,  100},
{525, 100,  100}
};

new Float:checkpoint[][3] =
{
{1728.1410,-2408.0303,13.5547}, // LSGate 1
{1645.5073,-2409.9602,13.5547}, // LSGate 2
{1564.9912,-2412.9614,13.5547}, // LSGate 3
{-1291.9259,-369.2527,14.1484}, // SFGate 1
{-1165.9976,-447.3511,14.1484}, // SFGate 2
{1823.5284,-2493.9839,13.5547}, // LSPiste
{-1411.5507,81.1161,14.3380}, // SFPiste
{1477.7045,1497.2922,12.1955}, // LVPiste
{1576.6111,1477.9835,12.2069}, // LVGate 1
{1572.3369,1399.4646,12.2174}, // LVGate 2
{1572.7142,1359.9974,12.2378}, // LVGate 3
{-2301.1882,-1641.2450,484.7390}, // Mt. Chilliad
{251.4685,2503.0830,17.2144} // Verdant Meadows
};

new lostpws[][] =
{
	"Imdumb",
	"geheimes",
	"Fb53Ac",
	"EveryOne90",
	"Deutschland",
	"Germany",
	"Ftgenrl",
	"Orangutan",
	"Litauen",
	"USAftw",
	"ohcanada",
	"extrahuge16",
	"asiansuperst",
	"dynamicsup",
	"iluvpws"
};

main()
{
	print("\n----------------------------------");
	print("  Cleared to Land  - German Server  ");
	print("         Scripted by Padarom        ");
	print("  All Copyrights to Christopher M.  ");
	print("----------------------------------\n");
}

public OnGameModeInit()
{
    ManualVehicleEngineAndLights();
	SetGameModeText("Cleared to Land 0.6");
	EnableZoneNames(0);
	EnableStuntBonusForAll(0);
	LimitGlobalChatRadius(15);
	UsePlayerPedAnims();
	LoadCars();
	DisableInteriorEnterExits();
	AddPlayerClass(61, 1886.7805175781, -2396.0200195313, 14.340411186218, 1, 0, 0, 0, 0, 0, 0);
	Connect_To_Database();

	CreateObject(17065, 1874.5190429688, -2200.2387695313, 16.710868835449, 0, 0, 90);
	CreateObject(16360, 1895.7670898438, -2200.2041015625, 12.546875, 0, 0, 272);
	CreateObject(9192, 1887.0031738281, -2228.3278808594, 17.422239303589, 0, 0, 310);
	CreateObject(1676, 1879.2833251953, -2194.3115234375, 14.403306007385, 0, 0, 274);
	CreateObject(1676, 1879.2919921875, -2206.2802734375, 14.228308677673, 0, 0, 272.74658203125);
	CreateObject(1676, 1871.6610107422, -2206.2189941406, 14.178309440613, 0, 0, 270.99658203125);
	CreateObject(1676, 1871.8266601563, -2194.5004882813, 14.203309059143, 0, 0, 270.99426269531);
	CreateObject(3666, 1871.9025878906, -2207.794921875, 13.24799156189, 0, 0, 0);
	CreateObject(3666, 1879.2509765625, -2207.5913085938, 13.24799156189, 0, 0, 0);
	CreateObject(3666, 1879.2387695313, -2192.8859863281, 13.397989273071, 0, 0, 0);
	CreateObject(3666, 1871.8698730469, -2192.4514160156, 13.397989273071, 0, 0, 0);
	CreateObject(3066, 1895.3873291016, -2191.0856933594, 13.60115146637, 0, 0, 0);
	CreateObject(17065, 1666.1345214844, 1302.5894775391, 14.306178092957, 0, 0, 0);
	CreateObject(17065, 1682.9415283203, 1302.7583007813, 14.306178092957, 0, 0, 0);
	CreateObject(1676, 1689.4210205078, 1305.501953125, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1689.6296386719, 1297.9772949219, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1676.4233398438, 1298.0655517578, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1676.6478271484, 1305.4012451172, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1672.6239013672, 1305.2513427734, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1672.6340332031, 1297.8984375, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1659.3857421875, 1297.8479003906, 11.807173728943, 0, 0, 0);
	CreateObject(1676, 1659.2219238281, 1305.1666259766, 11.807173728943, 0, 0, 0);
	CreateObject(9192, 1715.5274658203, 1290.4243164063, 14.688365936279, 0, 0, 0);
	CreateObject(9192, 1716.4300537109, 1316.7316894531, 14.688365936279, 0, 0, 0);
	CreateObject(9192, 1640.5715332031, 1318.0391845703, 14.688365936279, 0, 0, 332);
	CreateObject(9192, 1639.9201660156, 1285.7983398438, 14.688365936279, 0, 0, 29.495849609375);
	CreateObject(1444, 1716.2684326172, 1311.1314697266, 10.625, 0, 0, 0);
	CreateObject(3927, 1886.7805175781, -2396.0200195313, 14.340411186218, 358, 0, 298);
	CreateObject(3927, 1885.7662353516, -2394.0285644531, 13.731017112732, 358.00598144531, 6.003662109375, 298.20831298828);
	CreateObject(3927, 1884.8587646484, -2392.2856445313, 14.1059923172, 357.99499511719, 0, 287.99865722656);
	CreateObject(10764, 1367.2431640625, -2495.451171875, 9.3165187835693, 0, 0, 136);
	CreateObject(10764, 1378.2310791016, -2593.8759765625, 9.46653175354, 0, 0, 135.99975585938);
	CreateObject(3666, 2009.0549316406, -2475.2741699219, 13.06056022644, 0, 0, 0);
	CreateObject(3666, 1983.0146484375, -2476.8232421875, 13.052803039551, 0, 0, 0);
	CreateObject(979, -1157.9177246094, 34.771472930908, 14, 0, 0, 135.5);
	CreateObject(979, -1164.4877929688, 41.186767578125, 14, 0, 0, 135.49987792969);
	CreateObject(979, -1170.9836425781, 47.562854766846, 14, 0, 0, 135.49987792969);
	CreateObject(979, -1177.4528808594, 53.939262390137, 14, 0, 0, 135.49987792969);
	CreateObject(979, -1184.0301513672, 60.380065917969, 14, 0, 0, 135.49987792969);
	CreateObject(979, -1190.5311279297, 66.752784729004, 14, 0, 0, 135.49987792969);
	CreateObject(979, -1197.0244140625, 73.128227233887, 14, 0, 0, 135.49987792969);
	CreateObject(979, -1211.6998291016, 75.413520812988, 14, 0, 0, 225.49987792969);
	CreateObject(979, -1208.4622802734, 78.680992126465, 14, 0, 0, 225.49438476563);
	CreateObject(979, -1202.2822265625, 78.302192687988, 14, 0, 0, 135.49987792969);
	CreateObject(8169, -1276.8747558594, 57.090690612793, 72.198173522949, 0, 0, 332.5);
	CreateObject(1649, -1282.19140625, 56.172946929932, 74.020141601563, 0, 0, 44);
	CreateObject(8169, -1279.9742431641, 53.735466003418, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(1649, -1279.07421875, 59.268619537354, 74.020141601563, 0, 0, 45.7470703125);
	CreateObject(1649, -1282.140625, 53.114166259766, 74.020141601563, 0, 0, 135.7470703125);
	CreateObject(1649, -1279.0665283203, 50.036209106445, 74.020141601563, 0, 0, 134.7470703125);
	CreateObject(8169, -1278.3212890625, 52.580265045166, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1275.3461914063, 55.646286010742, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1278.4426269531, 52.453773498535, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1280.0168457031, 53.674125671387, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1278.6441650391, 52.128799438477, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1275.4921875, 49.137519836426, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(1649, -1275.9364013672, 46.941394805908, 74.020141601563, 0, 0, 134.74182128906);
	CreateObject(8169, -1272.3542480469, 52.350528717041, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1272.2553710938, 52.633285522461, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(1649, -1272.8763427734, 46.995788574219, 74.020141601563, 0, 0, 225.49182128906);
	CreateObject(1649, -1269.8513183594, 50.169494628906, 74.020141601563, 0, 0, 225.48889160156);
	CreateObject(8169, -1272.0329589844, 52.417675018311, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(8169, -1275.1566162109, 49.19409942627, 72.198173522949, 0, 0, 332.49572753906);
	CreateObject(1649, -1269.8978271484, 53.279342651367, 74.020141601563, 0, 0, 315.48889160156);
	CreateObject(1649, -1273.0329589844, 56.367073059082, 74.020141601563, 0, 0, 316.48889160156);
	CreateObject(1649, -1276.0620117188, 59.276779174805, 74.020141601563, 0, 0, 315.48889160156);
	CreateObject(8169, -1279.5476074219, 53.664714813232, 75.498115539551, 0.99990844726563, 179.24993896484, 298.5087890625);
	CreateObject(8169, -1275.2044677734, 49.430824279785, 75.598121643066, 0.999755859375, 179.24743652344, 298.50402832031);
	CreateObject(8169, -1276.8197021484, 56.891201019287, 75.548118591309, 0.999755859375, 179.24743652344, 298.50402832031);
	CreateObject(8169, -1272.3282470703, 52.445686340332, 75.598121643066, 0.999755859375, 179.24743652344, 298.50402832031);
	CreateObject(3388, -1274.8952636719, 53.824028015137, 72.198173522949, 0, 0, 176);
	CreateObject(3387, -1275.0666503906, 54.280666351318, 72.208335876465, 0, 0, 224);
	CreateObject(3388, -1275.6042480469, 54.545421600342, 72.198173522949, 0, 0, 263.99548339844);
	CreateObject(3387, -1276.2358398438, 54.430404663086, 72.208335876465, 0, 0, 301.49475097656);
	CreateObject(3388, -1276.607421875, 53.980964660645, 72.198173522949, 0, 0, 342.49047851563);
	CreateObject(3387, -1275.1119384766, 53.362731933594, 72.208335876465, 0, 0, 129.74230957031);
	CreateObject(3387, -1276.5667724609, 53.543697357178, 72.208335876465, 0, 0, 38.988037109375);
	CreateObject(3388, -1276.0062255859, 53.127490997314, 72.198173522949, 0, 0, 67.98779296875);
	CreateObject(3388, -1275.8747558594, 53.063472747803, 72.198173522949, 0, 0, 67.9833984375);
	CreateObject(3387, -1275.4530029297, 53.057487487793, 72.208335876465, 0, 0, 128.98754882813);
	CreateObject(3393, -1282.0263671875, 55.248035430908, 72.198173522949, 0, 0, 136);
	CreateObject(3393, -1278.6536865234, 58.751571655273, 72.198173522949, 0, 0, 135.99975585938);
	CreateObject(3393, -1274.5963134766, 56.871311187744, 72.198173522949, 0, 0, 46.749755859375);
	CreateObject(3393, -1270.56640625, 53.008811950684, 72.198173522949, 0, 0, 46.746826171875);
	CreateObject(3393, -1272.0456542969, 48.951679229736, 72.198173522949, 0, 0, 315.99682617188);
	CreateObject(3393, -1276.7170410156, 48.799537658691, 72.198173522949, 0, 0, 225.99426269531);
	CreateObject(3393, -1279.8067626953, 51.816696166992, 72.198173522949, 0, 0, 225.98876953125);
	CreateObject(17065, 1874.5190429688, -2200.2387695313, 16.710868835449, 0, 0, 90);
	CreateObject(16360, 1895.7670898438, -2200.2041015625, 12.546875, 0, 0, 272);
	CreateObject(9192, 1887.0031738281, -2228.3278808594, 17.422239303589, 0, 0, 310);
	CreateObject(1676, 1879.2833251953, -2194.3115234375, 14.403306007385, 0, 0, 274);
	CreateObject(1676, 1879.2919921875, -2206.2802734375, 14.228308677673, 0, 0, 272.7490234375);
	CreateObject(1676, 1871.6610107422, -2206.2189941406, 14.178309440613, 0, 0, 270.99658203125);
	CreateObject(1676, 1871.8266601563, -2194.5004882813, 14.203309059143, 0, 0, 270.99426269531);
	CreateObject(3666, 1871.9025878906, -2207.794921875, 13.24799156189, 0, 0, 0);
	CreateObject(3666, 1879.2509765625, -2207.5913085938, 13.24799156189, 0, 0, 0);
	CreateObject(3666, 1879.2387695313, -2192.8859863281, 13.397989273071, 0, 0, 0);
	CreateObject(3666, 1871.8698730469, -2192.4514160156, 13.397989273071, 0, 0, 0);
	CreateObject(3066, 1895.3873291016, -2191.0856933594, 13.60115146637, 0, 0, 0);
	CreateObject(930, 1894.1196289063, -2204.2680664063, 13.022750854492, 0, 0, 0);
	CreateObject(2715, 1883.8620605469, -2177.7058105469, 14.423182487488, 0, 0, 0);
	CreateObject(2715, 1878.1281738281, -2177.7216796875, 14.423182487488, 0, 0, 0);
	CreateObject(11505, -1125.8919677734, -176.88223266602, 17.54182434082, 0, 0, 45);
	CreateObject(7391, -1117.4772949219, -195.16625976563, 18.016033172607, 0, 0, 0);
	CreateObject(1676, -1126.7404785156, -184.55792236328, 14.924834251404, 0, 0, 44.5);
	CreateObject(1676, -1118.4813232422, -176.27206420898, 14.924834251404, 0, 0, 44.49462890625);
	CreateObject(1676, -1123.9017333984, -170.7728729248, 14.924834251404, 0, 0, 44.49462890625);
	CreateObject(1676, -1132.1669921875, -179.02075195313, 14.924834251404, 0, 0, 44.49462890625);
	CreateObject(3666, -1133.3863525391, -180.20582580566, 13.857652664185, 0, 0, 0);
	CreateObject(3666, -1127.8270263672, -185.57897949219, 13.857652664185, 0, 0, 0);
	CreateObject(3666, -1117.306640625, -175.11959838867, 13.857652664185, 0, 0, 0);
	CreateObject(3666, -1117.306640625, -175.11959838867, 13.857652664185, 0, 0, 0);
	CreateObject(8171, -2301.6164550781, -1641.8443603516, 483.00680541992, 0, 0, 0);
	CreateObject(5032, -2312.828125, -1638.6339111328, 484.12591552734, 0, 0, 90);
	CreateObject(3602, -2330.5598144531, -1642.0432128906, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.6013183594, -1626.9974365234, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.6586914063, -1613.2122802734, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.6569824219, -1599.8118896484, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.7438964844, -1588.6735839844, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.8217773438, -1580.8231201172, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2347.5922851563, -1581.3232421875, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2347.4809570313, -1593.9816894531, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2347.5505371094, -1608.2301025391, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2347.6142578125, -1622.2282714844, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2352.3642578125, -1622.1208496094, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2347.5944824219, -1632.4774169922, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2352.34375, -1632.3698730469, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2353.8503417969, -1643.5433349609, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2345.5239257813, -1645.236328125, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2344.2409667969, -1657.7431640625, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2333.5944824219, -1654.2956542969, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2328.1110839844, -1656.1754150391, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2329.0068359375, -1660.5847167969, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2334.1823730469, -1669.736328125, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.4128417969, -1676.05078125, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2330.4279785156, -1689.7105712891, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2329.1313476563, -1703.8845214844, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2273.8200683594, -1703.9678955078, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2273.9367675781, -1691.6072998047, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2273.927734375, -1679.0634765625, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2273.9965820313, -1666.8018798828, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2274.0561523438, -1654.2902832031, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2273.8659667969, -1641.7873535156, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2273.9243164063, -1629.2609863281, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2274.1130371094, -1617.9429931641, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2274.1394042969, -1603.1336669922, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2274.0847167969, -1592.2797851563, 475.99136352539, 0, 0, 0);
	CreateObject(3602, -2274, -1579.9827880859, 476.27209472656, 0, 0, 0);
	CreateObject(3602, -2301.4584960938, -1579.4406738281, 473.79165649414, 180, 90, 90);
	CreateObject(3602, -2314.3481445313, -1579.5107421875, 473.79165649414, 179.99450683594, 90, 90);
	CreateObject(3602, -2329.2724609375, -1579.5339355469, 473.79165649414, 179.99450683594, 90, 90);
	CreateObject(3602, -2333.1066894531, -1579.5848388672, 473.79165649414, 179.99450683594, 90, 90);
	CreateObject(3602, -2286.4890136719, -1579.4874267578, 473.79165649414, 179.99450683594, 90, 90);
	CreateObject(3602, -2273.48828125, -1579.4256591797, 473.79165649414, 179.99450683594, 90, 90);
	CreateObject(3602, -2272.8942871094, -1580.2099609375, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2272.9521484375, -1594.7513427734, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2272.955078125, -1606.7626953125, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2272.9533691406, -1621.6506347656, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2272.9245605469, -1635.8919677734, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2272.8615722656, -1651.0029296875, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2273.001953125, -1666.1066894531, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2272.4016113281, -1679.4132080078, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2271.8740234375, -1694.8420410156, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2271.595703125, -1702.8876953125, 473.79165649414, 179.99450683594, 90, 0);
	CreateObject(3602, -2271.5830078125, -1704.0026855469, 473.79165649414, 179.99450683594, 90, 270);
	CreateObject(3602, -2286.5690917969, -1703.9925537109, 473.79165649414, 179.99450683594, 90, 270);
	CreateObject(3602, -2301.5844726563, -1703.8654785156, 473.79165649414, 179.99450683594, 90, 270);
	CreateObject(3602, -2316.0903320313, -1703.9675292969, 473.79165649414, 179.99450683594, 90, 270);
	CreateObject(3602, -2322.3439941406, -1703.9764404297, 473.79165649414, 179.99450683594, 90, 270);
	CreateObject(3970, -2326.1018066406, -1633.3796386719, 484.09948730469, 0, 0, 270);
	CreateObject(3851, -2328.3950195313, -1647.2640380859, 485.00680541992, 0, 0, 180);
	CreateObject(3851, -2328.3583984375, -1658.4638671875, 485.00680541992, 0, 0, 179.99450683594);
	CreateObject(3851, -2328.458984375, -1620.2603759766, 485.00680541992, 0, 0, 179.99450683594);
	CreateObject(3851, -2328.4453125, -1609.1857910156, 485.00680541992, 0, 0, 179.99450683594);
	CreateObject(3851, -2333.9819335938, -1603.6507568359, 485.00680541992, 0, 0, 269.99450683594);
	CreateObject(3851, -2339.4313964844, -1609.2669677734, 485.00680541992, 0, 0, 359.73901367188);
	CreateObject(3851, -2339.6264648438, -1620.4631347656, 485.00680541992, 0, 0, 359.736328125);
	CreateObject(3851, -2339.6850585938, -1631.564453125, 485.00680541992, 0, 0, 359.736328125);
	CreateObject(3851, -2339.7102050781, -1642.5921630859, 485.00680541992, 0, 0, 359.736328125);
	CreateObject(3851, -2339.75390625, -1653.1486816406, 485.00680541992, 0, 0, 359.736328125);
	CreateObject(3851, -2333.9594726563, -1663.7838134766, 485.00680541992, 0, 0, 87.736328125);
	CreateObject(3851, -2339.8176269531, -1658.4602050781, 485.00680541992, 0, 0, 359.736328125);
	CreateObject(1693, -2332.9765625, -1661.4925537109, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2332.9934082031, -1657.2081298828, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.0634765625, -1652.7080078125, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.1452636719, -1648.2633056641, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.08984375, -1643.8787841797, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.0695800781, -1639.5275878906, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.1025390625, -1635.1771240234, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.060546875, -1630.7908935547, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.0595703125, -1626.4357910156, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.1608886719, -1622.0096435547, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.212890625, -1617.6392822266, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.1860351563, -1613.3688964844, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.1274414063, -1608.9114990234, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2333.2524414063, -1605.5687255859, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.27734375, -1661.48828125, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.2958984375, -1657.1796875, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.2294921875, -1652.7392578125, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1865234375, -1648.2919921875, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.181640625, -1643.9086914063, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1611328125, -1639.4760742188, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1772460938, -1635.1555175781, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1342773438, -1630.7943115234, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1015625, -1626.515625, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1845703125, -1622.0600585938, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1323242188, -1617.6917724609, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2335.1557617188, -1613.3702392578, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2334.9965820313, -1608.9343261719, 488.32470703125, 0, 0, 0);
	CreateObject(1693, -2334.947265625, -1605.5847167969, 488.32470703125, 0, 0, 0);
	CreateObject(3851, -2328.4870605469, -1632.0233154297, 485.00680541992, 0, 0, 179.99450683594);
	CreateObject(3851, -2328.5200195313, -1630.0737304688, 485.00680541992, 0, 0, 179.99450683594);
	CreateObject(2795, -2328.595703125, -1639.6619873047, 487.34564208984, 0, 0, 270);
	CreateObject(2797, -2328.4919433594, -1643.0899658203, 486.23809814453, 0, 0, 270);
	CreateObject(3526, -2286.2365722656, -1697.9138183594, 483.07522583008, 0, 0, 0);
	CreateObject(3526, -2286.1748046875, -1682.33984375, 483.07522583008, 0, 0, 0);
	CreateObject(3526, -2286.2224121094, -1661.0472412109, 483.07522583008, 0, 0, 0);
	CreateObject(3526, -2286.1696777344, -1632.8724365234, 483.07522583008, 0, 0, 0);
	CreateObject(3526, -2286.1655273438, -1601.6867675781, 483.07522583008, 0, 0, 0);
	CreateObject(3526, -2317.1254882813, -1602.7388916016, 483.07522583008, 0, 0, 180);
	CreateObject(3526, -2317.0590820313, -1634.2712402344, 483.07522583008, 0, 0, 179.99450683594);
	CreateObject(3526, -2316.958984375, -1660.9146728516, 483.07522583008, 0, 0, 179.99450683594);
	CreateObject(3526, -2316.9030761719, -1682.5902099609, 483.07522583008, 0, 0, 179.99450683594);
	CreateObject(3526, -2317.0141601563, -1700.6383056641, 483.07522583008, 0, 0, 179.99450683594);
	CreateObject(8038, -2333.5666503906, -1639.6385498047, 488.37512207031, 0, 0, 0);
	CreateObject(1682, -2332.1848144531, -1669.796875, 514.18872070313, 0, 0, 0);
	CreateObject(2775, -2328.19140625, -1635.0974121094, 487.30847167969, 0, 0, 90);
	CreateObject(3969, -2339.4426269531, -1653.7969970703, 483.90057373047, 0, 0, 90);
	CreateObject(3658, -2335.9562988281, -1605.3096923828, 483.65338134766, 0, 0, 0);
	CreateObject(3658, -1872.9486083984, 42.880523681641, 1063.5908203125, 0, 0, 0);
	CreateObject(2775, -1868.5716552734, 71.901504516602, 1057.4213867188, 0, 0, 0);
	CreateObject(3851, -2330.3913574219, -1658.4436035156, 487.00674438477, 0, 270.25024414063, 180.49456787109);
	CreateObject(3851, -2334.3500976563, -1658.5598144531, 487.00674438477, 0, 270.24719238281, 180.49438476563);
	CreateObject(3851, -2338.2905273438, -1659.2800292969, 487.00674438477, 0, 270.24719238281, 180.49438476563);
	CreateObject(3851, -2330.25, -1647.5112304688, 487.25680541992, 0, 270, 179.99450683594);
	CreateObject(3851, -2334.2336425781, -1647.6248779297, 487.25680541992, 0, 270, 179.99450683594);
	CreateObject(3851, -2337.9936523438, -1648.0561523438, 487.25680541992, 0, 270, 179.99450683594);
	CreateObject(3851, -2337.8759765625, -1637.025390625, 487.25680541992, 0, 270, 179.99450683594);
	CreateObject(3851, -2337.8723144531, -1625.7208251953, 487.25680541992, 0, 270, 179.99450683594);
	CreateObject(3851, -2337.9624023438, -1614.5568847656, 487.25680541992, 0, 270, 179.99450683594);
	CreateObject(3851, -2337.8981933594, -1608.3254394531, 487.1318359375, 0, 270, 179.99450683594);
	CreateObject(3851, -2334.0288085938, -1608.4028320313, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2334.03515625, -1619.6641845703, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2334.0437011719, -1630.7254638672, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2334.26171875, -1636.4366455078, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2330.5852050781, -1636.5692138672, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2330.5639648438, -1625.4158935547, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2330.40234375, -1614.5672607422, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2330.3981933594, -1608.5162353516, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(3851, -2330.419921875, -1639.1494140625, 487.10684204102, 0, 270, 179.99450683594);
	CreateObject(1572, -2330.69921875, -1626.5626220703, 483.58050537109, 0, 0, 26);
	CreateObject(1572, -2331.28515625, -1654.0638427734, 483.58050537109, 0, 0, 313.99914550781);
	CreateObject(1572, -2334.9995117188, -1630.6297607422, 483.58050537109, 0, 0, 313.99475097656);
	CreateObject(1572, -2331.505859375, -1630.4118652344, 483.58050537109, 0, 0, 7.9947509765625);
	CreateObject(1572, -2335.2268066406, -1640.8377685547, 483.58050537109, 0, 0, 7.9925537109375);
	CreateObject(1572, -2337.7585449219, -1619.0262451172, 483.58050537109, 0, 0, 221.99255371094);
	CreateObject(3666, -2301.5346679688, -1607.0354003906, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.5966796875, -1623.1385498047, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.6003417969, -1646.1607666016, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.6552734375, -1666.9130859375, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.662109375, -1704.6678466797, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.6237792969, -1586.6204833984, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2318.6120605469, -1586.4624023438, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2286.8405761719, -1586.4783935547, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.8337402344, -1574.3857421875, 482.39532470703, 0, 0, 0);
	CreateObject(3666, -2301.6574707031, -1689.1860351563, 482.39532470703, 0, 0, 0);
	CreateObject(9241, -2265.50390625, -1664.2431640625, 484.48599243164, 0, 0, 0);
	CreateObject(10244, -2263.2431640625, -1705.19140625, 479.45837402344, 0, 0, 92);
	CreateObject(3578, -2282.6345214844, -1596.7131347656, 482.23486328125, 0, 0, 41.25);
	CreateObject(3578, -2289.5805664063, -1602.7733154297, 482.23486328125, 0, 0, 41.248168945313);
	CreateObject(3578, -2296.314453125, -1610.0727539063, 482.23486328125, 0, 0, 54.498168945313);
	CreateObject(3578, -2300.3369140625, -1618.5754394531, 482.23486328125, 0, 0, 75.74365234375);
	CreateObject(3578, -2301.5803222656, -1628.3470458984, 482.23486328125, 0, 0, 89.98974609375);
	CreateObject(3578, -2284.2121582031, -1624.1334228516, 482.23486328125, 0, 0, 39.989013671875);
	CreateObject(3578, -2291.4951171875, -1630.2797851563, 482.23486328125, 0, 0, 39.984741210938);
	CreateObject(3578, -2297.7546386719, -1637.4532470703, 482.23486328125, 0, 0, 57.984741210938);
	CreateObject(3578, -2300.7346191406, -1646.5788574219, 482.23486328125, 0, 0, 85.980346679688);
	CreateObject(3578, -2301.2121582031, -1656.8361816406, 482.23486328125, 0, 0, 89.72900390625);
	CreateObject(3578, -2301.3100585938, -1666.6444091797, 482.23486328125, 0, 0, 89.725341796875);
	CreateObject(3578, -2301.5632324219, -1638.3907470703, 482.23486328125, 0, 0, 89.725341796875);
	CreateObject(3578, -2301.4619140625, -1648.3753662109, 482.23486328125, 0, 0, 92.225341796875);
	CreateObject(3578, -2299.2138671875, -1676.1353759766, 482.23486328125, 0, 0, 116.22473144531);
	CreateObject(3578, -2293.6975097656, -1683.9802246094, 482.23486328125, 0, 0, 135.22436523438);
	CreateObject(3578, -2285.2568359375, -1688.9299316406, 482.23486328125, 0, 0, 163.2197265625);
	CreateObject(3578, -2301.6164550781, -1618.4415283203, 482.23486328125, 0, 0, 90.468383789063);
	CreateObject(3578, -2301.6674804688, -1611.7653808594, 482.23486328125, 0, 0, 90.466918945313);
	CreateObject(3578, -2303.0520019531, -1602.2021484375, 482.23486328125, 0, 0, 106.46691894531);
	CreateObject(3578, -2307.5766601563, -1593.7459716797, 482.23486328125, 0, 0, 130.46301269531);
	CreateObject(3578, -2314.5390625, -1586.916015625, 482.23486328125, 0, 0, 140.46264648438);
	CreateObject(3578, -2323.3334960938, -1583.8972167969, 482.23486328125, 0, 0, 181.46020507813);
	CreateObject(990, -2325.5041503906, -1711.0341796875, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2315.4794921875, -1711.0374755859, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2305.5153808594, -1711.0126953125, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2295.5153808594, -1710.990234375, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2285.5178222656, -1711.0012207031, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2275.5688476563, -1710.9510498047, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2269.7749023438, -1711.0904541016, 484.54193115234, 0, 0, 0);
	CreateObject(990, -2264.658203125, -1693.7098388672, 484.54193115234, 0, 0, 89.75);
	CreateObject(990, -2264.6530761719, -1683.8227539063, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.5798339844, -1646.8636474609, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.5256347656, -1636.8895263672, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.4526367188, -1626.888671875, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.4353027344, -1616.9354248047, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.4340820313, -1606.9006347656, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.416015625, -1597.0699462891, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.365234375, -1587.2615966797, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2264.474609375, -1577.3179931641, 484.54193115234, 0, 0, 89.747314453125);
	CreateObject(990, -2269.49609375, -1572.1623535156, 484.54193115234, 0, 0, 179.74731445313);
	CreateObject(990, -2276.7570800781, -1572.1516113281, 484.54193115234, 0, 0, 179.74731445313);
	CreateObject(990, -2326.619140625, -1572.7049560547, 484.54193115234, 0, 0, 179.74731445313);
	CreateObject(990, -2336.1198730469, -1572.7227783203, 484.54193115234, 0, 0, 179.74731445313);
	CreateObject(990, -2342.8371582031, -1577.5045166016, 484.54193115234, 0, 0, 246.24731445313);
	CreateObject(990, -2346.7705078125, -1586.5863037109, 484.54193115234, 0, 0, 246.24206542969);
	CreateObject(990, -2350.19921875, -1595.8186035156, 484.54193115234, 0, 0, 252.24206542969);
	CreateObject(990, -2353.0222167969, -1605.2265625, 484.54193115234, 0, 0, 254.24060058594);
	CreateObject(990, -2355.7629394531, -1614.8485107422, 484.54193115234, 0, 0, 254.24011230469);
	CreateObject(990, -2357.896484375, -1623.0860595703, 484.54193115234, 0, 0, 255.99011230469);
	CreateObject(990, -2359.6596679688, -1632.1170654297, 484.54193115234, 0, 0, 261.98693847656);
	CreateObject(990, -2357.6813964844, -1641.0620117188, 484.54193115234, 0, 0, 297.98547363281);
	CreateObject(990, -2352.9677734375, -1649.798828125, 484.54193115234, 0, 0, 297.98217773438);
	CreateObject(990, -2348.46875, -1658.2188720703, 484.54193115234, 0, 0, 297.98217773438);
	CreateObject(990, -2344.2666015625, -1666.2292480469, 484.54193115234, 0, 0, 297.98217773438);
	CreateObject(990, -2339.5598144531, -1674.1656494141, 484.54193115234, 0, 0, 303.98217773438);
	CreateObject(990, -2334.6049804688, -1681.4660644531, 484.54193115234, 0, 0, 303.98071289063);
	CreateObject(990, -2329.2697753906, -1689.3072509766, 484.54193115234, 0, 0, 303.98071289063);
	CreateObject(990, -2328.2097167969, -1690.8991699219, 484.54193115234, 0, 0, 303.98071289063);
	CreateObject(990, -2327.1733398438, -1699.1025390625, 484.54193115234, 0, 0, 248.73071289063);
	CreateObject(990, -2329.7062988281, -1706.6898193359, 484.54193115234, 0, 0, 254.73046875);

	// HONULULU
	CreateObject(10766, 1751.1999511719, 3985.6000976563, 11.5, 0, 0, 180);
	CreateObject(10767, 1750.5999755859, 4112.7001953125, -1.2000000476837, 0, 0, 225.5);
	CreateObject(10817, 1667.4000244141, 4725.1000976563, -0.30000001192093, 0, 0, 269.5);
	CreateObject(10816, 1730.5999755859, 4387, 12.39999961853, 0, 0, 270);
	CreateObject(16771, 1638.4000244141, 4558.2001953125, 20, 0, 0, 270);
	CreateObject(16771, 1638.5, 4505, 20, 0, 0, 270);
	CreateObject(16771, 1638.5, 4452, 20, 0, 0, 270);
	CreateObject(16771, 1638.5, 4399, 20, 0, 0, 270);
	CreateObject(16771, 1638.6999511719, 4346, 20, 0, 0, 270);
	CreateObject(16771, 1638.6999511719, 4292.7998046875, 20, 0, 0, 270);
	CreateObject(16771, 1638.6999511719, 4239.7001953125, 20, 0, 0, 270);
	CreateObject(8038, 1623.6999511719, 4628.6000976563, 33.599998474121, 0, 0, 359.75);
	CreateObject(8038, 1624.6999511719, 4710.6000976563, 33.599998474121, 0, 0, 179.74731445313);
	CreateObject(4991, 1633.5, 4846.3999023438, 19.299999237061, 0, 0, 90);
	CreateObject(7981, 1659.3000488281, 4957.1000976563, 18.39999961853, 0, 0, 222);
	CreateObject(1682, 1657.5999755859, 4953.7998046875, 29.10000038147, 0, 0, 206);
	CreateObject(3526, 1766, 4100.1000976563, 13.5, 0, 0, 0);
	CreateObject(4832, 1685.5, 4221.7001953125, 24.39999961853, 0, 0, 270);

	// DUBAI
	CreateObject(3505, 320.29998779297, -3703.3000488281, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 303.29998779297, -3681.1000976563, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 274.10000610352, -3680.6999511719, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 260.29998779297, -3702.3999023438, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 259.70001220703, -3733.1000976563, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 274.89999389648, -3750.8999023438, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 412.79998779297, -3591.1999511719, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 412.39999389648, -3624.6000976563, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 412.60000610352, -3657.8999023438, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 415.5, -3690.8000488281, 6.3000001907349, 0, 0, 0);
	CreateObject(3505, 415.79998779297, -3724.6999511719, 6.3000001907349, 0, 0, 0);

 	Welcomeeins = TextDrawCreate(147, 139, "Willkommen auf dem ~n~Server ~r~Cleared to Land~w~!~n~~n~Dies ist ein deutscher~n~Airlineserver.~n~~n~Waehle dies um dich~n~~r~einzuloggen ~w~oder zu~n~~r~registrieren~w~.");
	Welcomezwei = TextDrawCreate(286, 179, "Du hast dein Passwort~n~~r~vergessen~w~?~n~Macht nichts. ~n~~n~Hiermit kannst du ~n~dir ein neues~n~~r~erstellen~w~.");
	Welcomedrei = TextDrawCreate(420, 161, "Mit ~r~falschem Namen~w~~n~online gekommen?~n~~n~Auch kein Problem!~n~~r~Aendere~w~ ihn hier.");
	Welcomefo = TextDrawCreate(147, 108, "~b~Start");
	Welcomesz = TextDrawCreate(291, 139, "~b~Passwort");
	Welcomesd = TextDrawCreate(420, 121, "~b~Name");

	TextDrawSetShadow(Welcomeeins, 0);
	TextDrawFont(Welcomeeins, 1);
	TextDrawLetterSize(Welcomeeins, 0.3, 0.8);
	TextDrawSetShadow(Welcomefo, 0);
	TextDrawFont(Welcomefo, 3);
	TextDrawLetterSize(Welcomefo, 0.4, 0.9);
	TextDrawSetOutline(Welcomefo, 1);

	TextDrawSetShadow(Welcomezwei, 0);
	TextDrawFont(Welcomezwei, 1);
	TextDrawLetterSize(Welcomezwei, 0.3, 0.8);
	TextDrawSetShadow(Welcomesz, 0);
	TextDrawFont(Welcomesz, 3);
	TextDrawLetterSize(Welcomesz, 0.4, 0.9);

	TextDrawSetShadow(Welcomedrei, 0);
	TextDrawFont(Welcomedrei, 1);
	TextDrawLetterSize(Welcomedrei, 0.3, 0.8);
	TextDrawSetShadow(Welcomesd, 0);
	TextDrawFont(Welcomesd, 3);
	TextDrawLetterSize(Welcomesd, 0.4, 0.9);

	SetTimer("BenzinVerlust", TANKTIMER, true);
	SetTimer("TachoTimer",TACHOTIMER, true);
	SetTimer("Auftanken",500, true);
	SetTimer("TimeTimer",60000,true);
	SetTimer("WeatherTimer",RandomEx(300000,500000),false);
	SetTimer("points",2000,true);
	SetWorldTime(10);
	for (new i=0; i< MAX_VEHICLES; i++)
	{
		GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(i,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		Motor[i] = false;
		new model = GetVehicleModel(i);
		for(new j=0; j< CAR_LIMIT; j++)
		{
			if(model == vehicleData[j][0])
			{
				Tank[i] = vehicleData[j][2];
				MaxTank[i] = vehicleData[j][1];
			}
		}
	}
	return 1;
}

public OnGameModeExit()
{
	new name[MAX_PLAYER_NAME];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "loggedin") == 1)
			{
  				GetPlayerName(i, name, MAX_PLAYER_NAME);
				mysql_SetInt("benutzer","Cash",GetPlayerMoney(i),"Name",name);
				mysql_SetInt("benutzer","Points",GetPlayerScore(i),"Name",name);
			}
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	SetPlayerPos(playerid, 1889.9227, -2399.9668, 14.7744);
	SetPlayerCameraPos(playerid, 1892.0582, -2390.7754, 13.5391);
	SetPlayerCameraLookAt(playerid, 1880.9227, -2396.9668, 14.7744);
	return 1;
}

public OnPlayerConnect(playerid)
{
	new constring[128], pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
	format(constring, 128, "%s hat den Server betreten.", pName);
	SendClientMessageToAll(COLOR_ORANGE, constring);
	SendClientMessage(playerid, COLOR_ORANGE, "Willkommen bei \"Cleared to Land\" - Besucht uns auf www.Cleared-to-Land.org");
	SendClientMessage(playerid, COLOR_ORANGE, "* Bitte drücke zum Fortfahren auf Spawn.");
	SetPVarInt(playerid, "loggedin", 0);
	PrepareTextDraws(playerid);
 	Menu[playerid] = 1;
 	anzeige[playerid] = Create3DTextLabel(" ", COLOR_ORANGE, 0, 0, 0, 1000, 0);
 	Attach3DTextLabelToPlayer(anzeige[playerid],playerid,0,0,0.5);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new disconstring[128], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	Delete3DTextLabel(anzeige[playerid]);
	switch (reason)
	{
	    case 0: format(disconstring, 128, "%s hatte einen Verbindungsabbruch.", name);
	    case 1: format(disconstring, 128, "%s hat den Server verlassen.", name);
	    case 2: format(disconstring, 128, "%s wurde vom Server gekickt/gebannt.", name);
	}
	SendClientMessageToAll(COLOR_ORANGE, disconstring);
	if(ImFlug[playerid] == true) DisablePlayerCheckpoint(playerid);
	if(GetPVarInt(playerid,"toggleticket") == 1)
	{
		SetPVarInt(GetPVarInt(playerid,"ticketid"), "toggleticket", 0);
		SetPVarInt(GetPVarInt(playerid,"ticketid"), "ticket", 0);
		SendClientMessage(GetPVarInt(playerid,"ticketid"), COLOR_RED, "* Dein Ticketansprechpartner ist offline. Das Ticket wurde deaktiviert.");
	}
	if(GetPVarInt(playerid, "loggedin") == 1)
	{
	    mysql_SetInt("benutzer","Cash",GetPlayerMoney(playerid),"Name",name);
	    mysql_SetInt("benutzer","Points",GetPlayerScore(playerid),"Name",name);
	}
	if(GetPVarInt(playerid, "tutorial") != 0) RemovePlayer(playerid);
	if(IsATC[playerid])
	{
		IsATC[playerid] = false;
		atcbelegt[ATCPos[playerid]] = false;
		ATCPos[playerid] = 0;
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(GetPVarInt(playerid, "loggedin") != 1)
	{
		TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 1889.9227, -2399.9668, 14.7744);
		SetPlayerCameraPos(playerid, 1892.0582, -2390.7754, 13.5391);
		SetPlayerCameraLookAt(playerid, 1880.9227, -2396.9668, 14.7744);
		SendClientMessage(playerid, COLOR_ORANGE, "Bitte nutze die Pfeiltasten um etwas auszuwählen und die Sprungtaste zum Bestätigen.");
		TextDrawShowForPlayer(playerid, Welcomeeins);
		TextDrawShowForPlayer(playerid, Welcomezwei);
		TextDrawShowForPlayer(playerid, Welcomedrei);
		TextDrawShowForPlayer(playerid, Welcomefo);
		TextDrawShowForPlayer(playerid, Welcomesz);
		TextDrawShowForPlayer(playerid, Welcomesd);
	}
	else
	{
		new home[20];
		GetPVarString(playerid,"heimat",home,20);
		SetPlayerSkin(playerid, 61);
		SetCameraBehindPlayer(playerid);
		SetPlayerColor(playerid,COLOR_YELLOW);
		if(!strcmp(home,"ls"))
		{
			SetPlayerPos(playerid,1887.5907,-2393.4739,13.5391);
			SetPlayerFacingAngle(playerid,281.8907);
		}
		else if(!strcmp(home,"lv"))
		{
	  		SetPlayerPos(playerid,1595.2727,1448.6219,10.8282);
		   	SetPlayerFacingAngle(playerid,86.6821);
		}
		else if(!strcmp(home,"sf"))
		{
			SetPlayerPos(playerid,-1264.0547,23.0747,14.1484);
		    SetPlayerFacingAngle(playerid,133.7686);
		}
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(ImFlug[playerid] == true)
	{
		DisablePlayerCheckpoint(playerid);
		ImFlug[playerid] = false;
		cp[playerid]=0;
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	if(weaponid>0 && weaponid<46)
	{
	    SendClientMessageToAll(COLOR_RED, "Ein Waffenhacker wurde automatisch gebannt.");
		SendClientMessage(issuerid, COLOR_RED, "* Schicker Waffenhack ;)");
		RangeBan(issuerid);
		SendTicket(issuerid,"Auto-Ban","Ich habe Weapon-Hacks benutzt und wurde deshalb automatisch gebannt. Ich bin dumm!");
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	gatebelegt[gate[vehicleid]] = false;
	gate[vehicleid] = 0;
	new path[128];
	format(path, 128, "/cars/%i.ini",vehicleid);
	flughafen[vehicleid] = dini_Get(path, "airport");
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	gatebelegt[gate[vehicleid]] = false;
	gate[vehicleid] = 0;
	new path[128];
	format(path, 128, "/cars/%i.ini",vehicleid);
	Motor[vehicleid] = false;
	flughafen[vehicleid] = dini_Get(path, "airport");
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(GetPVarInt(playerid, "toggleticket") == 1)
	{
	    new name[MAX_PLAYER_NAME], string[128];
		GetPlayerName(playerid,name,MAX_PLAYER_NAME);
		format(string,128,"%s: %s",name,text);
	    SendClientMessage(GetPVarInt(playerid,"ticketid"), COLOR_LIMEGREEN, string);
	    SendClientMessage(playerid, COLOR_LIMEGREEN, string);
	    return 0;
	}

	if(GetPVarInt(playerid, "muted") == 1)
	{
	    SendClientMessage(playerid, COLOR_RED, "* * Du bist stumm geschaltet. Wenn das bereits lange der Fall ist, melde dich per /ticket an einen Admin.");
	    return 0;
	}

	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	if(strcmp(cmdtext, "/change", true) == 0)
	{
		if(GetPVarInt(playerid,"loggedin") == 1)
		{
			ShowPlayerDialog(playerid, changefrak, DIALOG_STYLE_LIST, "Beruf auswählen", "Pilot\nBodenpersonal\nATC", "Annehmen","Abbrechen");
		}
		return 1;
	}

	if (strcmp(cmdtext, "/pwchange", true) == 0)
	{
		if(GetPVarInt(playerid, "loggedin") == 1)
		{
			ShowPlayerDialog(playerid, pwchange, DIALOG_STYLE_INPUT, "Passwort ändern", "Bitte gebe hier dein gewünschtes neues Passwort ein.", "Annehmen", "Abbrechen");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist nicht eingeloggt.");
		return 1;
	}

	if (strcmp(cmdtext, "/stop", true) == 0)
	{
		if(GetPVarInt(playerid, "admin") < 1)
		{
		    if(GetPVarInt(playerid,"spectating")!=1) return SendClientMessage(playerid,COLOR_RED,"Du beobachtest niemanden.");
			TogglePlayerSpectating(playerid,0);
			DeletePVar(playerid,"spectating");
			SendClientMessage(playerid,COLOR_GREEN,"Du hast mit dem Beobachten aufgehört.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin.");
		return 1;
	}

	if (strcmp(cmdtext, "/tchat", true) == 0)
	{
	    if(GetPVarInt(playerid, "toggleticket") == 1)
	    {
	        SetPVarInt(playerid, "ticket", 0);
	        SetPVarInt(playerid, "toggleticket", 0);
	        SetPVarInt(GetPVarInt(playerid, "ticketid"), "toggleticket", 0);
	        SendClientMessage(playerid, COLOR_GREEN, "Dein Ticket wurde erfolgreich beendet. Vielen Dank!");
	        SendClientMessage(GetPVarInt(playerid, "ticketid"), COLOR_GREEN, "Das Ticket wurde beendet.");
	    }
		else if(GetPVarInt(playerid, "ticket") == 1)
		{
			SetPVarInt(playerid, "toggleticket", 1);
			SetPVarInt(GetPVarInt(playerid, "ticketid"), "toggleticket", 1);
			SendClientMessage(playerid, COLOR_GREEN, "Du hast das Ticket angenommen. Um es wieder zu beenden, gib den Befehl erneut ein. Du kannst wie gewohnt mit dem Admin schreiben.");
			SendClientMessage(GetPVarInt(playerid, "ticketid"), COLOR_GREEN, "Das Ticket wurde angenommen. Du kannst nun sprechen.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du hast kein laufendes Ticket.");
		return 1;
	}

	if (strcmp(cmdtext, "/ticket", true) == 0)
	{
		ShowPlayerDialog(playerid,ticketdia1,DIALOG_STYLE_INPUT,"Überschrift","Bitte gib eine Überschrift für dein Ticket ein.","Weiter","Abbrechen");
		return 1;
	}

	if(strcmp(cmdtext,"/campos",true)==0 || strcmp(cmdtext,"/cam",true)==0)
 	{
		if(ATCPos[playerid]==0) return SendClientMessage(playerid, COLOR_RED,"* Du bist kein ATC.");
		else
		{
/*  LST  */ if(ATCPos[playerid]==1) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LS Tower", "Bodenpersonal\nLockheed\'s\nA320 & Cessnas\nHelikopter\nDC3 & BN-2 Islander\'s\nLearjets\nRunway Westwärts\nRunway Ostwärts\nRunway Blick #1\nRunway Blick #2","Auswählen","Abbrechen");
/*  LSD  */ else if(ATCPos[playerid]==2) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LS Delivery", "Bodenpersonal\nLockheed\'s\nA320 & Cessnas\nHelikopter\nDC3 & BN-2 Islander\'s\nLearjet","Auswählen","Abbrechen");
/*  SFT  */ else if(ATCPos[playerid]==3) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera SF Tower", "Helikopter\nBN-2 Islander\nDC3\nCessnas\nLearjets\nA320\nLockheed\'s\nBodenpersonal\nRunway Westwärts\nRunway Ostwärts\nRunway Blick #1\nRunway Blick #2","Auswählen","Abbrechen");
/*  SFD  */ else if(ATCPos[playerid]==4) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera SF Delivery", "Helikopter\nBN-2 Islander\nDC3\nCessnas\nLearjets\nA320\nLockheed\'s\nBodenpersonal","Auswählen","Abbrechen");
/*  LVT  */ else if(ATCPos[playerid]==5) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LV Tower", "Bodenpersonal #1\nBodenpersonal #2\nCessna Hangar 1\nCessna Hangar 2\nLearjet\'s\nHelikopter #1\nHelikopter #2 & DC3\'s\nLockheeds\nBN-2 Islanders\nRunway Südwärts\nRunway Nordwärts\nRunway Blick #1\nRunway Blick #2","Auswählen","Abbrechen");
/*  LVD  */ else if(ATCPos[playerid]==6) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LV Delivery", "Bodenpersonal #1\nBodenpersonal #2\nCessna Hangar 1\nCessna Hangar 2\nLearjet\'s\nHelikopter #1\nHelikopter #2 & DC3\'s\nLockheeds\nBN-2 Islanders","Auswählen","Abbrechen");
		}
		return 1;
 	}

	if(strcmp(cmdtext,"/de",true)==0 || strcmp(cmdtext,"/detach",true)==0)
 	{
		if(IsPlayerInAnyVehicle(playerid)) DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		else SendClientMessage(playerid, COLOR_RED, "* Du bist in keinem Fahrzeug.");
		return 1;
 	}

	if(strcmp(cmdtext,"/airport",true)==0 || strcmp(cmdtext,"/air",true)==0)
 	{
		ShowPlayerDialog(playerid, airportsel, DIALOG_STYLE_LIST, "Heimatflughafen ändern", "Los Santos International Airport\nEaster Bay Airport\nLas Venturas Airport", "Auswählen", "Abbrechen");
		return 1;
 	}

	if(strcmp(cmdtext,"/m",true)==0 || strcmp(cmdtext,"/motor",true)==0)
 	{
		if(GetPlayerVehicleSeat(playerid) == 0)
		{
			new car = GetPlayerVehicleID(playerid);
			if ((TanktGerade[car] == true || TanktGerade[GetVehicleTrailer(car)] == true || WirdBetankt[GetVehicleTrailer(car)] == true) && Motor[car]==false) SendClientMessage(playerid, COLOR_RED, "* Du tankst gerade. Du kannst nun den Motor nicht starten.");
			else if (Tank[car] < 1)	SendClientMessage(playerid, COLOR_RED, "* Der Tank ist leer. Du musst erst /tanken.");
			else if (Motor[car] == false)
			{
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
				Motor[car] = true;
			}
			else
			{
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				Motor[car] = false;
			}
		}
		return 1;
	}

 	if(strcmp(cmdtext,"/flug",true)==0)
 	{
		if(IsPlayerInAnyAircraft(playerid) && GetPlayerSkin(playerid) == 61 && ImFlug[playerid] == false)
		{
		    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		    if(model==592||model==577)
		    {
				if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"ls")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Easter Bay Airport\nLas Venturas Airport", "Auswählen", "Abbrechen");
				else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"sf")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Los Santos International Airport\nLas Venturas Airport", "Auswählen", "Abbrechen");
				else ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Easter Bay Airport\nLos Santos International Airport", "Auswählen", "Abbrechen");
			}
		    else
		    {
				if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"ls")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Easter Bay Airport\nLas Venturas Airport\nVerdant Meadows\nMount Chilliad", "Auswählen", "Abbrechen");
				else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"sf")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Los Santos International Airport\nLas Venturas Airport\nVerdant Meadows\nMount Chilliad", "Auswählen", "Abbrechen");
				else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"lv")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Easter Bay Airport\nLos Santos International Airport\nVerdant Meadows\nMount Chilliad", "Auswählen", "Abbrechen");
				else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"mt")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Easter Bay Airport\nLos Santos International Airport\nLas Venturas Airport\nVerdant Meadows", "Auswählen", "Abbrechen");
				else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"vm")) ShowPlayerDialog(playerid, flug, DIALOG_STYLE_LIST, "Zielflughafen auswählen", "Easter Bay Airport\nLos Santos International Airport\nLas Venturas Airport\nMount Chilliad", "Auswählen", "Abbrechen");
			}
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist in keinem Luftfahrzeug oder befindest dich bereits auf einem Flug.");
		return 1;
 	}

 	if(strcmp(cmdtext,"/betankall",true)==0)
 	{
 	    if(GetPVarInt(playerid,"admin")>=1)
 	    {
	 		for (new i=0; i< MAX_VEHICLES; i++)
			{
				new model = GetVehicleModel(i);
				for(new j=0; j< CAR_LIMIT; j++)
				{
					if(model == vehicleData[j][0])
					{
						Tank[i] = vehicleData[j][1];
						MaxTank[i] = vehicleData[j][1];
					}
				}
			}
			SendClientMessageToAll(COLOR_GREEN, "Alle Fahrzeuge wurden vollgetankt.");
		}
		else SendClientMessage(playerid, COLOR_RED,"* Du bist kein Admin.");
 	    return 1;
 	}

 	if(strcmp(cmdtext,"/betanken",true)==0)
 	{
		if(GetPlayerSkin(playerid) == 16 && IsPlayerInAnyVehicle(playerid) && IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
			if(Tank[GetVehicleTrailer(GetPlayerVehicleID(playerid))] > 0)
			{
			    new trailer, car, ziel;
			    if(ReturnNearestCar(playerid, 14.0) == -1) return SendClientMessage(playerid, COLOR_RED, "* Du bist nicht in der Nähe eines Flugzeuges.");
			    trailer = GetVehicleTrailer(GetPlayerVehicleID(playerid));
			    car = GetPlayerVehicleID(playerid);
			   	ziel = ReturnNearestCar(playerid, 14.0);
				if(Motor[car] == true) return SendClientMessage(playerid, COLOR_RED, "* Du musst erst deinen Motor ausschalten.");
				else if(Motor[ziel] == true) return SendClientMessage(playerid, COLOR_RED, "* Die Motoren des Flugzeuges müssen ausgeschaltet sein.");
				TanktGerade[trailer] = true;
			   	TanktGerade[ziel] = true;
			    TankZiel[trailer] = ziel;
			    TankZiel[ziel] = trailer;
				SendClientMessage(playerid, COLOR_GREEN, "Betanken wird gestartet.");
		    	Reward(playerid);
			}
			else SendClientMessage(playerid, COLOR_RED, "* Dein Tankwagen ist leer.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du kannst momentan nicht tanken.");
		return 1;
 	}

	if(strcmp(cmdtext,"/tanken",true)==0)
 	{
		if(GetPlayerSkin(playerid) == 16 && !IsPlayerInAnyAircraft(playerid) && (IsPlayerInRangeOfPoint(playerid, 10, 1874.6827,-2200.3113,13.7388) || IsPlayerInRangeOfPoint(playerid, 10, -1125.5383,-177.0234,14.2731) || IsPlayerInRangeOfPoint(playerid, 8, 1, 1, 1)))
		{
 			    new car = GetPlayerVehicleID(playerid);
 			    if(GetVehicleTrailer(car)) if(GetVehicleModel(GetVehicleTrailer(car)))WirdBetankt[GetVehicleTrailer(car)] = true;
				if(Motor[car] == true) return SendClientMessage(playerid, COLOR_RED, "* Du musst vorher den Motor ausschalten.");
				TanktGerade[car] = true;
				SendClientMessage(playerid, COLOR_GREEN, "Betanken wird gestartet.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du kannst momentan nicht tanken.");
		return 1;
 	}

	if(strcmp(cmdtext,"/regeln",true)==0)
 	{
		ShowPlayerDialog(playerid, regeln1, DIALOG_STYLE_MSGBOX, "Serverregeln", "1.) Buguser und Hacker werden mit einem Ban bestraft.\n2.) Das Fahren auf den Start- und Landebahnen während einem Start oder einer Landung ist untersagt.\n3.) Das mutwillige Zerstören anderer Fahrzeuge ist ebenfalls strengstens untersagt.\n4.) Das Benutzen der Start- und Landebahnen beim Landen eines Flughafen ist Pflicht.", "Weiter", "Schließen");
		return 1;
 	}

 	if(strcmp(cmdtext,"/reparieren",true)==0)
 	{
		if(GetPlayerSkin(playerid) == 16 && IsPlayerInRangeOfVehicleModel(playerid, 5.0, 552))
		{
		    if(random(10) > 5) return SendClientMessage(playerid, COLOR_RED, "* Die Reparatur braucht noch einen Versuch.");
		    else
		    {
		    	if(ReturnNearestCar(playerid, 5.0) == -1) return SendClientMessage(playerid, COLOR_RED, "* Du bist nicht in der Nähe eines Flugzeuges.");
				else
				{
					RepairVehicle(ReturnNearestCar(playerid, 5.0));
					SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich ein Flugzeug repariert.");
		    		Reward(playerid);
		    	}
		    }
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du hast keinen Utility Van in der Nähe oder bist kein Bodenpersonal.");
		return 1;
 	}

 	if(strcmp(cmdtext,"/test",true)==0)
 	{
 		ShowAchievement(playerid, "Ich bin reich!", "Erhalte 10.000$ auf deinem Weg", "~g~Nevada~w~ &~g~ Sparrow~w~ freigeschaltet~n~~g~+2 Punkte", 0, 2);
 	    return 1;
 	}
  	if(strcmp(cmdtext,"/verarzten",true)==0)
 	{
  		if(GetPlayerVehicleSeat(playerid) != 3 && GetPlayerVehicleSeat(playerid) != 2) return SendClientMessage(playerid, COLOR_RED, "* Du musst hinten im Krankenwagen sitzen.");
 	    else if(GetVehicleModel(GetPlayerVehicleID(playerid))!=416) return SendClientMessage(playerid, COLOR_RED, "* Du musst in einem Krankenwagen sitzen.");
 		else if(GetPlayerSkin(playerid) == 16)
		{
		    new mode = GetPlayerVehicleID(playerid);
			for(new i=0;i<MAX_PLAYERS;i++)
			{
			    if(IsPlayerConnected(i) && i!=playerid)
			    {
			        if(GetPlayerVehicleSeat(i) == 3 || GetPlayerVehicleSeat(i) == 2)
			        {
			            if(GetPlayerVehicleID(i) == mode)
			            {
			                SetPlayerHealth(i, 100);
			                new name[MAX_PLAYER_NAME], string[128];
			                GetPlayerName(i, name, MAX_PLAYER_NAME);
			                format(string,128,"Du hast %s verarztet.",name);
			                SendClientMessage(playerid, COLOR_GREEN, string);
			                break;
			            }
			        }
			    }
			}
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du musst dem Bodenpersonal angehören um dies zu tun.");
		return 1;
 	}

	if (strcmp(cmdtext, "/atp", true) == 0)
	{
		if(GetPVarInt(playerid, "admin") >= 1)
		{
			ShowPlayerDialog(playerid, airports, DIALOG_STYLE_LIST, "Flughafen auswählen", "Los Santos International Airport\nLas Venturas Airport\nVerdant Meadows Airfield\nEaster Bay Airport\nMount Chilliad Airport", "Auswählen", "Abbrechen");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin!");
		return 1;
	}

	if (strcmp(cmdtext, "/hilfe", true) == 0)
	{
	    ShowPlayerDialog(playerid, help1, DIALOG_STYLE_LIST, "Befehle auswählen", "Allgemeines\nChat\nProbleme\nPilot\nATC\nBodenpersonal\nAdministration", "Auswählen", "Abbrechen");
	    return 1;
	}
	if (strcmp(cmdtext, "/info", true) == 0)
	{
	    ShowPlayerDialog(playerid, info, DIALOG_STYLE_MSGBOX, "Serverinfos", "Scriptname: Cleared to Land - Version: 0.6 (Open Beta)\n\nServerbesitzer: FreakY & r0ck4ff3\nScripter: FreakY - Mapper: r0ck4ff3\n\nAdministration: FreakY, r0ck4ff3\nModeration: andrediddi\nHomepage: www.cleared-to-land.org\nTeamspeak-IP: lexenstar.de:9779\n\nDanke an: Hawkeye, Lukas, TS3.ch und Lexenstar für eure sehr freundlichen Sponsorings! Wir danken euch!", "Schließen", "Abbrechen");
	    return 1;
	}

	if (strcmp(cmdtext, "/respawncar", true) == 0)
	{
		if(GetPVarInt(playerid, "admin") >= 1 && IsPlayerInAnyVehicle(playerid))
		{
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_GREEN, "Fahrzeug wurde erfolgreich neu gespawnt.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin oder in keinem Fahrzeug!");
		return 1;
	}

	if (strcmp(cmdtext, "/restart", true) == 0)
	{
		if(GetPVarInt(playerid, "admin") >= 2)
		{
			new name[MAX_PLAYER_NAME], string[128];
			GetPlayerName(playerid,name,MAX_PLAYER_NAME);
			format(string,128,"Admin %s startet den Server neu.",name);
			SendClientMessageToAll(COLOR_ORANGE,string);
			SendRconCommand("gmx");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin!");
		return 1;
	}

	if (strcmp(cmdtext, "/duty", true) == 0)
	{
		if(GetPVarInt(playerid, "admin") >= 2)
		{
		    if(GetPVarInt(playerid,"duty")!=1)
		    {
		        SetPVarInt(playerid,"duty",1);
		        SendClientMessage(playerid,COLOR_GREEN,"Du kannst nun alle Chats lesen.");
			}
			else
			{
			    SetPVarInt(playerid,"duty",0);
				SendClientMessage(playerid,COLOR_GREEN,"Du bist nun wieder normal im Spiel tätig.");
			}
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin!");
		return 1;
	}

	dcmd(settime, 7, cmdtext);
	dcmd(setweather, 10, cmdtext);
	dcmd(adm, 3, cmdtext);
	dcmd(car, 3, cmdtext);
	dcmd(savecar, 7, cmdtext);
	dcmd(setcolor, 8, cmdtext);
	dcmd(setsign, 7, cmdtext);
	dcmd(a, 1, cmdtext);
	dcmd(b, 1, cmdtext);
	dcmd(o, 1, cmdtext);
	dcmd(freq, 4, cmdtext);
	dcmd(me, 2, cmdtext);
	return 0;
}

dcmd_me(playerid, params[])
{
	if(GetPVarInt(playerid, "muted") == 1)
	{
	    SendClientMessage(playerid, COLOR_RED, "* * Du bist stumm geschaltet. Wenn das bereits lange der Fall ist, melde dich per /ticket an einen Admin.");
	    return 0;
	}
	if(!strlen(params)) return SendClientMessage(playerid, COLOR_RED, "* Du musst einen Text eingeben.");
	else
	{
		new Float:x,Float:y,Float:z, metext[128], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid,name,MAX_PLAYER_NAME);
		GetPlayerPos(playerid,x,y,z);
		format(metext,128,"* %s %s", name, params);
	    for(new i=0;i<MAX_PLAYERS;i++)
	    {
	        if(IsPlayerConnected(i)) if(IsPlayerInRangeOfPoint(i,40,x,y,z)) SendClientMessage(i,COLOR_LIGHTBLUE,metext);
	    }
	}
	return 1;
}

dcmd_freq(playerid, params[])
{
	if(!strlen(params)) return SendClientMessage(playerid, COLOR_RED, "* Du musst eine Frequenz eingeben.");
	else
	{
	    new string[256];
	    format(string,256,"Du hast deine Frequenz auf \'%i\' geändert.",strval(params));
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    SetPVarInt(playerid,"frequenz",strval(params));
	}
	return 1;
}

dcmd_o(playerid, params[])
{
	if(GetPVarInt(playerid, "muted") == 1)
	{
	    SendClientMessage(playerid, COLOR_RED, "* * Du bist stumm geschaltet. Wenn das bereits lange der Fall ist, melde dich per /ticket an einen Admin.");
	    return 0;
	}
	if(!strlen(params)) return SendClientMessage(playerid, COLOR_RED, "* Du musst einen Text eingeben.");
	else
	{
	    new message[256], name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	    format(message,256,"[ALLE] %s: %s", name,params);
		SendClientMessageToAll(COLOR_FLBLUE, message);
	}
	return 1;
}

dcmd_a(playerid, params[])
{
	if(!strlen(params)) return SendClientMessage(playerid, COLOR_RED, "* Du musst einen Text eingeben.");
	else if(GetPlayerSkin(playerid)!=61&&GetPlayerSkin(playerid)!=295&&GetPlayerSkin(playerid)!=185) SendClientMessage(playerid, COLOR_RED, "* Du musst Pilot oder ATC sein um den Funk zu nutzen.");
	else if(GetPVarInt(playerid,"frequenz")==0) SendClientMessage(playerid, COLOR_RED, "* Du musst erst mit \'/freq]\' eine Frequenz auswählen.");
	else
	{
	    new message[256], name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	    format(message,256,"[Frequenz: %i] %s: %s", GetPVarInt(playerid,"frequenz"),name,params);
	    if(GetPlayerSkin(playerid)!=61) format(message,256,"[Frequenz: %i] Tower: %s", GetPVarInt(playerid,"frequenz"),params);
	    for(new i=0; i<MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i) && GetPVarInt(playerid,"loggedin")==1)
	        {
	            if(GetPVarInt(i,"duty")==1) SendClientMessage(i, COLOR_LAWNGREEN, message);
	            else if((GetPlayerSkin(i)==61||GetPlayerSkin(i)==295||GetPlayerSkin(i)==185||GetPlayerSkin(i)==287) && GetPVarInt(i,"frequenz")==GetPVarInt(playerid,"frequenz"))
	            {
	            	SendClientMessage(i, COLOR_LAWNGREEN, message);
	            }
	        }
	    }
	}
	return 1;
}

dcmd_b(playerid, params[])
{
	if(!strlen(params)) return SendClientMessage(playerid, COLOR_RED, "* Du musst einen Text eingeben.");
	else if(ATCPos[playerid]==0&&GetPlayerSkin(playerid)!=16) SendClientMessage(playerid, COLOR_RED, "* Du musst entweder Bodenpersonal oder Delivery sein.");
	else
	{
	    new message[256], name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	    if(GetPlayerSkin(playerid)==16) format(message,256,"[Boden] %s: %s",name,params);
	    else format(message,256,"[ATC] %s: %s",name,params);
	    for(new i=0; i<MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i) && GetPVarInt(playerid,"loggedin")==1)
	        {
	            new home1[20],home2[20];
	            GetPVarString(playerid,"heimat",home1,20);
	            GetPVarString(i,"heimat",home2,20);
	            if(GetPVarInt(i,"duty")==1) SendClientMessage(i, COLOR_LAWNGREEN, message);
	            else if((GetPlayerSkin(i)==16||GetPlayerSkin(i)==295||GetPlayerSkin(i)==185) && !strcmp(home1,home2))
	            {
					SendClientMessage(i, COLOR_LIGHTBLUE, message);
	            }
	        }
	    }
	}
	return 1;
}

dcmd_setcolor(playerid, params[])
{
	new
		c1,
		c2;
	if (sscanf(params, "ii", c1, c2)) SendClientMessage(playerid, COLOR_RED, "* Nutze: /setcolor [FARBE1] [FARBE2]");
	if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, COLOR_RED, "* Du bist in keinem Fahrzeug.");
	else
	{
		ChangeVehicleColor(GetPlayerVehicleID(playerid), c1, c2);
		new path[128];
		format(path, 128, "/cars/%i.ini", GetPlayerVehicleID(playerid));
		dini_IntSet(path, "c1", c1);
		dini_IntSet(path, "c2", c2);
		SendClientMessage(playerid, COLOR_GREEN, "Farbe wurde geändert.");
	}
	return 1;
}

dcmd_setsign(playerid, params[])
{
	new s1[40];
	if (sscanf(params, "s[40]", s1)) SendClientMessage(playerid, COLOR_RED, "* Nutze: /setsign [CALLSIGN]");
	if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, COLOR_RED, "* Du bist in keinem Fahrzeug.");
	else
	{
		new path[128];
		format(path, 128, "/cars/%i.ini", GetPlayerVehicleID(playerid));
		dini_Set(path, "callsign", s1);
		call[GetPlayerVehicleID(playerid)] = s1;
		SendClientMessage(playerid, COLOR_GREEN, "Callsign wurde geändert.");
	}
	return 1;
}

dcmd_car(playerid, params[])
{
	if(GetPVarInt(playerid,"admin")>=1)
	{
		if (strlen(params))
		{
		    new Float:x, Float:y, Float:z, Float:a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    new v = CreateVehicle(strval(params), x+0.5, y, z, a, 1, 1, -1);
		    Tank[v] = 200;
		}
		else SendClientMessage(playerid, COLOR_RED, "* * Nutze \'/car [ID]\'");
	}
	return 1;
}

dcmd_savecar(playerid, params[])
{
	if(GetPVarInt(playerid,"admin")>=1)
	{
		if (strlen(params))
		{
		    new Float:x, Float:y, Float:z, Float:a;
		    GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
		    CreateCar(GetVehicleModel(GetPlayerVehicleID(playerid)), 1, 1, x, y, z, a, params);
		    SendClientMessage(playerid, COLOR_GREEN, "Fahrzeug wurde gespeichert.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* * Nutze \'/savecar [plate]\'");
	}
	return 1;
}

dcmd_adm(playerid, params[])
{
	if (strlen(params))
	{
		new name[MAX_PLAYER_NAME], string[128];
	 	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	  	if(GetPVarInt(playerid, "admin") == 1) format(string,128,"Supporter %s: %s", name, params);
	   	else if(GetPVarInt(playerid, "admin") == 2) format(string,128,"Moderator %s: %s", name, params);
	    else if(GetPVarInt(playerid, "admin") == 3) format(string,128,"Administrator %s: %s", name, params);
	    else
		{
			SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin!");
			return 1;
		}
		SendClientMessageToAll(COLOR_GOLD, string);
	}
	else SendClientMessage(playerid, COLOR_RED, "* * Nutze \'/a [Text]\'");
	return 1;
}

dcmd_settime(playerid, params[])
{
    new tame;
	if (strlen(params))
	{
		if(GetPVarInt(playerid,"admin") >= 1)
		{
			tame = strval(params);
			if (tame >= 0 && tame <= 24)
			{
				SetWorldTime(tame);
				time = tame;
				SendClientMessage(playerid, COLOR_GREEN, "Zeit erfolgreich geändert.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "* * Zahl zwischen 0 und 24 eintragen.");
			}
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin!");
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "* * Nutze \'/settime [0-24]\'");
	}
	return 1;
}

dcmd_setweather(playerid, params[])
{
	if (strlen(params))
	{
		if(GetPVarInt(playerid,"admin") >= 1)
		{
			SetWeather(strval(params));
			SendClientMessage(playerid, COLOR_GREEN, "Wetter erfolgreich geändert.");
		}
		else SendClientMessage(playerid, COLOR_RED, "* Du bist kein Admin!");
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "* * Nutze \'/setweather [ID]\'");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(ImFlug[playerid] == true)
	{
		DisablePlayerCheckpoint(playerid);
		ImFlug[playerid] = false;
		cp[playerid]=0;
		SendClientMessage(playerid,COLOR_RED,"* Du hast dein Luftfahrzeug im Flug verlassen, er wurde automatisch beendet");
	}
	if(Motor[vehicleid] == true && GetPlayerState(playerid)==2)
	{
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		Motor[vehicleid] = false;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{

    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(cp[playerid] == 2)
	{
	    new Float:heal;
		GetVehicleHealth(GetPlayerVehicleID(playerid), heal);
		if(heal<701)
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Soll das ein Scherz sein? Die Maschine ist ja fast schrottreif... Das darfst du bezahlen!");
			DisablePlayerCheckpoint(playerid);
			RepairVehicle(GetPlayerVehicleID(playerid));
			ImFlug[playerid] = false;
			cp[playerid] = 0;
			GivePlayerMoney(playerid,-200);
			SetPlayerScoreEx(playerid,GetPVarInt(playerid,"points")-1);
		}
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 577 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 592)
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Dein Flug ist fertig.");
			DisablePlayerCheckpoint(playerid);
			ImFlug[playerid] = false;
			cp[playerid] = 0;
			new level = GetPlayerScore(playerid), model=GetVehicleModel(GetPlayerVehicleID(playerid));
			if((model==593||model==487) && level >= 15) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if((model==511||model==469) && level >= 30) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
 			else if(model==553 && level >= 40) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if(model==417 && level >= 60) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if(model==519 && level >= 80) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if(model==592 && level >= 110) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else GivePlayerReward(playerid, 100, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "Dein Flug ist beendet. Bitte suche dir nun eine geeignete Parkposition aus.");
			DisablePlayerCheckpoint(playerid);
			if(flugziel[playerid] == 1) flughafen[GetPlayerVehicleID(playerid)] = "ls";
			else if(flugziel[playerid] == 2) flughafen[GetPlayerVehicleID(playerid)] = "sf";
			else if(flugziel[playerid] == 3) flughafen[GetPlayerVehicleID(playerid)] = "lv";
			ImFlug[playerid] = false;
			cp[playerid] = 0;
			new level = GetPlayerScore(playerid), model=GetVehicleModel(GetPlayerVehicleID(playerid));
			if((model==593||model==487) && level >= 15) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if((model==511||model==469) && level >= 30) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
 			else if(model==553 && level >= 40) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if(model==417 && level >= 60) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else if(model==519 && level >= 80) SendClientMessage(playerid, COLOR_RED, "* Für deinen derzeitigen Kenntnisstand ist ein Flug mit dieser Maschine wohl nicht zu würdigen.");
			else GivePlayerReward(playerid, 100, 1);
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	if(cp[playerid] == 1)
	{
		new id = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 577 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 592)
		{
			if(flugziel[playerid] == 1) // LS
			{
				flughafen[id] = "ls";
			    if(gatebelegt[0] == false)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[0][0], checkpoint[0][1], checkpoint[0][2], 10);
					cp[playerid] = 2;
					gate[id] = 0;
					gatebelegt[0] = true;
				}
			    else if(gatebelegt[0] == true && gatebelegt[1] == false)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[1][0], checkpoint[1][1], checkpoint[1][2], 10);
					cp[playerid] = 2;
					gate[id] = 1;
					gatebelegt[1] = true;
				}
			    else if(gatebelegt[1] == true)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[2][0], checkpoint[2][1], checkpoint[2][2], 10);
					cp[playerid] = 2;
					gate[id] = 2;
					gatebelegt[2] = true;
				}
			}

			else if(flugziel[playerid] == 2) // SF
			{
				flughafen[id] = "sf";
			    if(gatebelegt[3] == false)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[3][0], checkpoint[3][1], checkpoint[3][2], 10);
					cp[playerid] = 2;
					gate[id] = 3;
					gatebelegt[3] = true;
				}
			    else if(gatebelegt[3] == true)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[4][0], checkpoint[4][1], checkpoint[4][2], 10);
					cp[playerid] = 2;
					gate[id] = 4;
					gatebelegt[4] = true;
				}
			}

			else if (flugziel[playerid] == 3)// LV
			{
				flughafen[id] = "lv";
			    if(gatebelegt[5] == false)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[8][0], checkpoint[8][1], checkpoint[8][2], 10);
					cp[playerid] = 2;
					gate[id] = 5;
					gatebelegt[5] = true;
				}
				else if(gatebelegt[5] == true && gatebelegt[6] == false)
		    	{
					SetPlayerCheckpoint(playerid, checkpoint[9][0], checkpoint[9][1], checkpoint[9][2], 10);
					cp[playerid] = 2;
					gate[id] = 6;
					gatebelegt[6] = true;
				}
			    else if(gatebelegt[6] == true)
			    {
					SetPlayerCheckpoint(playerid, checkpoint[10][0], checkpoint[10][1], checkpoint[10][2], 10);
					cp[playerid] = 2;
					gate[id] = 7;
					gatebelegt[7] = true;
				}
			}
		}
		else
		{
		    if(flugziel[playerid] == 1)
		    {
				SetPlayerCheckpoint(playerid, checkpoint[5][0], checkpoint[5][1], checkpoint[5][2], 10);
				cp[playerid] = 2;
				flughafen[id] = "ls";
			}
			else if(flugziel[playerid] == 2)
		    {
				SetPlayerCheckpoint(playerid, checkpoint[6][0], checkpoint[6][1], checkpoint[6][2], 10);
				cp[playerid] = 2;
				flughafen[id] = "sf";
			}
			else if (flugziel[playerid] == 3)
		    {
		        SetPlayerCheckpoint(playerid, checkpoint[7][0], checkpoint[7][1], checkpoint[7][2], 10);
				cp[playerid] = 2;
				flughafen[id] = "lv";
			}
			else if (flugziel[playerid] == 4)
		    {
		        SetPlayerCheckpoint(playerid, checkpoint[12][0], checkpoint[12][1], checkpoint[12][2], 10);
				cp[playerid] = 2;
				flughafen[id] = "vm";
			}
			else if (flugziel[playerid] == 5)
		    {
		        SetPlayerCheckpoint(playerid, checkpoint[11][0], checkpoint[11][1], checkpoint[11][2], 10);
				cp[playerid] = 2;
				flughafen[id] = "mt";
			}
		}
	}
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (Menu[playerid] != 0)
	{
		if(newkeys & KEY_JUMP)
		{
			if (Menu[playerid] == 1)
   			{
		        if(mysql_CheckAccount(playerid))
		        {
		            ShowPlayerDialog(playerid, login, DIALOG_STYLE_INPUT, "Einloggen", "Willkommen zurück! Bitte gib dein Passwort ein.", "Annehmen", "Abbrechen");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid, register1, DIALOG_STYLE_PASSWORD, "Registrierung", "Willkommen bei \"Cleared to Land\". Bitte wähle hier dein Passwort aus.\n(Dies ist auch nachträglich änderbar)", "Weiter", "Abbrechen");
		        }
	    	}

			if (Menu[playerid] == 2)
			{
		        if(mysql_CheckAccount(playerid))
		        {
		            ShowPlayerDialog(playerid, lostpw, DIALOG_STYLE_INPUT, "Passwort vergessen?", "Kein Problem. Gib einfach die Antwort deiner geheimen Frage ein.", "Annehmen", "Abbrechen");
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_RED, "* Dein Name ist nicht registriert.");
		        }
			}

			if (Menu[playerid] == 3)
			{
		        ShowPlayerDialog(playerid, changename, DIALOG_STYLE_INPUT, "Name ändern", "Bitte gebe hier deinen richtigen Namen ein.", "Ändern", "Abbrechen");
			}
		}
		return 1;
	}
	else if(ATCPos[playerid] != 0)
	{
	    if(newkeys & KEY_CROUCH)
		{
/*  LST  */ if(ATCPos[playerid]==1) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LS Tower", "Bodenpersonal\nLockheed\'s\nA320 & Cessnas\nHelikopter\nDC3 & BN-2 Islander\'s\nLearjets\nRunway Westwärts\nRunway Ostwärts\nRunway Blick #1\nRunway Blick #2","Auswählen","Abbrechen");
/*  LSD  */ else if(ATCPos[playerid]==2) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LS Delivery", "Bodenpersonal\nLockheed\'s\nA320 & Cessnas\nHelikopter\nDC3 & BN-2 Islander\'s\nLearjet","Auswählen","Abbrechen");
/*  SFT  */ else if(ATCPos[playerid]==3) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera SF Tower", "Helikopter\nBN-2 Islander\nDC3\nCessnas\nLearjets\nA320\nLockheed\'s\nBodenpersonal\nRunway Westwärts\nRunway Ostwärts\nRunway Blick #1\nRunway Blick #2","Auswählen","Abbrechen");
/*  SFD  */ else if(ATCPos[playerid]==4) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera SF Delivery", "Helikopter\nBN-2 Islander\nDC3\nCessnas\nLearjets\nA320\nLockheed\'s\nBodenpersonal","Auswählen","Abbrechen");
/*  LVT  */ else if(ATCPos[playerid]==5) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LV Tower", "Bodenpersonal #1\nBodenpersonal #2\nCessna Hangar 1\nCessna Hangar 2\nLearjet\'s\nHelikopter #1\nHelikopter #2 & DC3\'s\nLockheeds\nBN-2 Islanders\nRunway Südwärts\nRunway Nordwärts\nRunway Blick #1\nRunway Blick #2","Auswählen","Abbrechen");
/*  LVD  */ else if(ATCPos[playerid]==6) ShowPlayerDialog(playerid, camdia, DIALOG_STYLE_LIST, "Kamera LV Delivery", "Bodenpersonal #1\nBodenpersonal #2\nCessna Hangar 1\nCessna Hangar 2\nLearjet\'s\nHelikopter #1\nHelikopter #2 & DC3\'s\nLockheeds\nBN-2 Islanders","Auswählen","Abbrechen");
		}
	}

	else
	{
	    if(newkeys & KEY_ANALOG_LEFT)
	    {
			if(GetPlayerVehicleSeat(playerid) == 0)
			{
				new car = GetPlayerVehicleID(playerid);
				if ((TanktGerade[car] == true || TanktGerade[GetVehicleTrailer(car)] == true || WirdBetankt[GetVehicleTrailer(car)] == true) && Motor[car]==false)
				{
				    SendClientMessage(playerid, COLOR_RED, "* Du tankst gerade. Du kannst nun den Motor nicht starten.");
				}
				else if (Tank[car] < 1)
				{
					SendClientMessage(playerid, COLOR_RED, "* Der Tank ist leer. Du musst erst /tanken.");
				}
				else if (Motor[car] == false)
				{
					GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(car,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
					Motor[car] = true;
				}
				else
				{
					GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
					Motor[car] = false;
				}
			}
		}
	    if(newkeys & KEY_ANALOG_RIGHT)
	    {
			if(GetPlayerVehicleSeat(playerid) == 0)
			{
				new car = GetPlayerVehicleID(playerid);
				if (Licht[car] == false)
				{
					GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(car,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
					Licht[car] = true;
				}
				else
				{
					GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(car,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
					Licht[car] = false;
				}
			}
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(GetPlayerVehicleSeat(playerid) == 0)
	{
 			// GESCHWINDIGKEIT
			new vehicleid,Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,speed_string[256],final_speed_int;
			vehicleid = GetPlayerVehicleID(playerid);
			new string[50], rtring[20], Float:health, ntring[50], ktring[100], cring[100];
			new id = GetVehicleModel(GetPlayerVehicleID(playerid)), name[30];
			GetVehicleHealth(GetPlayerVehicleID(playerid), health);
			if(vehicleid != 0)
			GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
			final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*136.666667;
			final_speed_int = floatround(final_speed,floatround_round);
			format(speed_string,256,"Geschwindigkeit: %i Km/h",final_speed_int);
			TextDrawSetString(speed[playerid], speed_string);
 			// \ GESCHWINDIGKEIT

			// FAHRZEUGNAME
			if(id==407) name = "Feuerwehrwagen";
			else if(id==416) name = "Rettungswagen";
			else if(id==599) name = "Einsatzleiterwagen";
			else if(id==490) name = "Follow Me";
			else if(id==485) name = "Baggage Fahrzeug";
			else if(id==514) name = "Tanklaster";
			else if(id==593) name = "Cessna 152";
			else if(id==511) name = "BN 2 Islander";
			else if(id==553) name = "Douglas DC3";
			else if(id==519) name = "Learjet 31";
			else if(id==577) name = "Airbus A320";
			else if(id==592) name = "Lockheed C141";
			else if(id==460) name = "Cessna 152 Amphibia";
			else if(id==487) name = "Bell 206";
			else if(id==469) name = "Bell 46";
			else if(id==417) name = "Sea King MK41";
			else if(id==552) name = "Utility Van";
			else if(id==525) name = "Abschleppfahrzeug";
			else name = "_";
 			format(ntring, 50, "%s", name);
 			// \ FAHRZEUGNAME

 			// SONSTIGES - RUFZEICHEN, MOTOR, ZUSTAND, TANK, ANHÄNGER
			if(IsPlayerInAnyAircraft(playerid))
			{
			    new pName[MAX_PLAYER_NAME], anzeigname[128];
				GetPlayerName(playerid,pName,MAX_PLAYER_NAME);
				format(anzeigname,128,"%s\n%s - %s",name,pName,call[GetPlayerVehicleID(playerid)]);
				Update3DTextLabelText(anzeige[playerid], COLOR_ORANGE, anzeigname);
			}

			if(IsPlayerInAnyAircraft(playerid)) format(cring, 100, "~r~Rufzeichen: ~w~%s", call[GetPlayerVehicleID(playerid)]);
 			else format(cring, 100, "_");

			if(Motor[GetPlayerVehicleID(playerid)] == true) TextDrawSetString(motor[playerid], "~w~Motor: ~g~An");
			else if(Motor[GetPlayerVehicleID(playerid)] == false) TextDrawSetString(motor[playerid], "~w~Motor: ~r~Aus");

			if(floatround(health/10) < 40) format(rtring,sizeof rtring,"~w~Zustand: ~r~%i%",floatround(health/10));
			else if(floatround(health/10) < 70) format(rtring,sizeof rtring,"~w~Zustand: ~y~%i%",floatround(health/10));
			else if(floatround(health/10) >= 70) format(rtring,sizeof rtring,"~w~Zustand: ~g~%i%",floatround(health/10));

			if(Tank[vehicleid] < 30) format(string,sizeof string,"~w~Tank: ~r~%i~w~/~g~%i ~w~Liter",Tank[vehicleid], MaxTank[vehicleid]);
			else if(Tank[vehicleid] <= 100) format(string,sizeof string,"~w~Tank: ~y~%i~w~/~g~%i ~w~Liter",Tank[vehicleid], MaxTank[vehicleid]);
			else if(Tank[vehicleid] > 100) format(string,sizeof string,"~w~Tank: ~g~%i~w~/~g~%i ~w~Liter",Tank[vehicleid], MaxTank[vehicleid]);

			if(id == 514 && IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
				if(TanktGerade[GetVehicleTrailer(GetPlayerVehicleID(playerid))] == true)
				{
				    format(ktring, sizeof ktring,"~r~%i Liter~w~ -Offen-",Tank[GetVehicleTrailer(GetPlayerVehicleID(playerid))]);
				}
				else format(ktring, sizeof ktring,"~g~%i Liter~w~ -Geschlossen-",Tank[GetVehicleTrailer(GetPlayerVehicleID(playerid))]);
			}
			else format(ktring, sizeof ktring,"_");
 			// \ SONSTIGES - RUFZEICHEN, MOTOR, ZUSTAND, TANK, ANHÄNGER

			TextDrawSetString(inhalt[playerid],string);
			TextDrawSetString(repair[playerid],rtring);
			TextDrawSetString(vehiclename[playerid],ntring);
			TextDrawSetString(kmstand[playerid],ktring);
			TextDrawSetString(callsign[playerid],cring);
			TextDrawShowForPlayer(playerid, inhalt[playerid]);
			TextDrawShowForPlayer(playerid, repair[playerid]);
			TextDrawShowForPlayer(playerid, vehiclename[playerid]);
			TextDrawShowForPlayer(playerid, kmstand[playerid]);
			TextDrawShowForPlayer(playerid, callsign[playerid]);
			TextDrawShowForPlayer(playerid, motor[playerid]);
   			TextDrawShowForPlayer(playerid, speed[playerid]);
   			if(!IsPlayerAllowedForVehicle(playerid))
			{
				GameTextForPlayer(playerid,"~r~Du kannst dieses Fahrzeug nicht nutzen.", 3000, 5);
				RemovePlayerFromVehicle(playerid);
			}
	}

	else
	{
	    TextDrawSetString(motor[playerid],"_");
		TextDrawSetString(inhalt[playerid],"_");
		TextDrawSetString(repair[playerid],"_");
		TextDrawSetString(vehiclename[playerid],"_");
		TextDrawSetString(kmstand[playerid],"_");
		TextDrawSetString(speed[playerid], "_");
		TextDrawSetString(callsign[playerid], "_");
		Update3DTextLabelText(anzeige[playerid],COLOR_ORANGE," ");
	}

	if(!IsPlayerInAnyAircraft(playerid))
	{
		Update3DTextLabelText(anzeige[playerid],COLOR_ORANGE," ");
	}

    GetPlayerKeys(playerid,Keys[playerid],ud[playerid],lr[playerid]);
    if (Menu[playerid] != 0)
    {
        if (lr[playerid] > 0)
        {
            if (Menu[playerid] == 1)
            {
                Menu[playerid] = 2;
                TextDrawHideForPlayer(playerid, Welcomefo);
                TextDrawHideForPlayer(playerid, Welcomesz);
                TextDrawSetOutline(Welcomesz, 1);
                TextDrawSetOutline(Welcomefo, 0);
                TextDrawShowForPlayer(playerid, Welcomefo);
                TextDrawShowForPlayer(playerid, Welcomesz);
            }
            else if (Menu[playerid] == 2)
            {
                Menu[playerid] = 3;
                TextDrawHideForPlayer(playerid, Welcomesd);
                TextDrawHideForPlayer(playerid, Welcomesz);
                TextDrawSetOutline(Welcomesd, 1);
                TextDrawSetOutline(Welcomesz, 0);
                TextDrawShowForPlayer(playerid, Welcomesd);
                TextDrawShowForPlayer(playerid, Welcomesz);
            }
        }

        else if (lr[playerid] < 0)
        {
            if (Menu[playerid] == 3)
            {
                Menu[playerid] = 2;
                TextDrawHideForPlayer(playerid, Welcomesz);
                TextDrawHideForPlayer(playerid, Welcomesd);
                TextDrawSetOutline(Welcomesz, 1);
                TextDrawSetOutline(Welcomesd, 0);
                TextDrawShowForPlayer(playerid, Welcomesz);
                TextDrawShowForPlayer(playerid, Welcomesd);
            }
            else if (Menu[playerid] == 2)
            {
                Menu[playerid] = 1;
                TextDrawHideForPlayer(playerid, Welcomefo);
                TextDrawHideForPlayer(playerid, Welcomesz);
                TextDrawSetOutline(Welcomefo, 1);
                TextDrawSetOutline(Welcomesz, 0);
                TextDrawShowForPlayer(playerid, Welcomefo);
                TextDrawShowForPlayer(playerid, Welcomesz);
            }
        }
    }
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new path[128], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	format(path, 128, "/spieler/%s.ini", name);

	//                                      NAME ÄNDERN
	//                                      NAME ÄNDERN
	//                                      NAME ÄNDERN
	if(dialogid == changename && response)
	{
 		new bool:hit = false;
	    for(new i=0; i<MAX_PLAYERS; i++)
	    {
	        GetPlayerName(i, name, MAX_PLAYER_NAME);
	        if(!strcmp(name, inputtext)) hit = true;
	    }

	    if(hit == false)
	    {
	        new string[128];
	        format(string,128,"Dein Name wurde erfolgreich auf \'%s\' geändert.", inputtext);
	        SetPlayerName(playerid, inputtext);
	        SendClientMessage(playerid, COLOR_ORANGE, string);
		}
		else SendClientMessage(playerid, COLOR_RED, "* Ein Spieler mit diesem Namen ist bereits online.");
		return 1;
	}

	// 										TUTORIAL
	// 										TUTORIAL
	// 										TUTORIAL
	if(dialogid == tut1)
	{
	    if(!response)
		{
		    SendClientMessage(playerid,COLOR_RED,"Du musst das Tutorial abschließen um spielen zu können. Dein Account wurde gelöscht.");
		    Kick(playerid);
			RemovePlayer(playerid);
		}
		else ShowPlayerDialog(playerid,tut2,DIALOG_STYLE_MSGBOX,"Tutorial", "Für was welcher Beruf zuständig ist, kannst du im Forum (HowTo-Bereich) nachlesen.\nDieses Tutorial soll deinem Einstieg ins Pilotenleben dienen.\nAls erstes solltest du dich zwischen Dodo und Maverick entscheiden.\nDas sind die einzigen Maschinen, die du mit Level 1 nutzen kannst.", "Weiter", "Abbrechen");
	}

	if(dialogid == tut2)
	{
	    if(!response)
		{
		    SendClientMessage(playerid,COLOR_RED,"Du musst das Tutorial abschließen um spielen zu können. Dein Account wurde gelöscht.");
		    Kick(playerid);
			RemovePlayer(playerid);
		}
		else ShowPlayerDialog(playerid,tut3,DIALOG_STYLE_MSGBOX,"Tutorial", "Wenn du im Flugzeug bist, wechsel erstmal deine Frequenz auf den entsprechenden Flughafen (/frequenzen) mit /freq NUMMER.\nDann schau nach, ob dein Flugzeug ein Callsign hat (unten links) - Wenn nicht, weise mit /setsign eins zu.\n\nNun kommen wir zum eigentlichen fliegerischen Part.", "Weiter", "Abbrechen");
	}

	if(dialogid == tut3)
	{
	    if(!response)
		{
		    SendClientMessage(playerid,COLOR_RED,"Du musst das Tutorial abschließen um spielen zu können. Dein Account wurde gelöscht.");
		    Kick(playerid);
			RemovePlayer(playerid);
		}
		else ShowPlayerDialog(playerid,tut4,DIALOG_STYLE_MSGBOX,"Tutorial", "Mit /a rufst du den Tower (falls einer online ist) auf der aktuellen Frequenz.\nGib ihm dein Callsign, und sage dass du gerne rollen bzw. starten würdest.\nDein Flugziel kansnt du dann mit /flug auswählen. Rolle einfach durch den ersten\nCheckpoint durch, dann wird der Zweite angezeigt.", "Weiter", "Abbrechen");
	}

	if(dialogid == tut4)
	{
	    if(!response)
		{
		    SendClientMessage(playerid,COLOR_RED,"Du musst das Tutorial abschließen um spielen zu können. Dein Account wurde gelöscht.");
		    Kick(playerid);
			RemovePlayer(playerid);
		}
		else ShowPlayerDialog(playerid,tut5,DIALOG_STYLE_MSGBOX,"Tutorial", "Im Flug musst du eigentlich nur die Frequenz wechseln und den anzufliegenden Tower\nanrufen und nach einer Landeerlaubnis fragen. Wenn du diese hast: Gute Landung ;)\n\nAnsonsten könnte es ja der Fall sein, dass dein Tank leer wird oder dein Flugzeug Schaden nimmt.\nDafür gib ebenfalls dem Tower bescheid, und sag ihm er solle dir Bodenpersonal vorbeischicken.", "Beenden", "Abbrechen");
	}

	if(dialogid == tut5)
	{
	    if(!response)
		{
		    SendClientMessage(playerid,COLOR_RED,"Du musst das Tutorial abschließen um spielen zu können. Dein Account wurde gelöscht.");
		    Kick(playerid);
			RemovePlayer(playerid);
		}
		else ShowPlayerDialog(playerid,tut6,DIALOG_STYLE_LIST,"Wähle deinen Heimatflughafen", "Los Santos International Airport\nLas Venturas Airport\nEaster Bay Airport", "Auswählen", "Abbrechen");
	}

	if(dialogid == tut6)
	{
	    if(!response)
		{
		    SendClientMessage(playerid,COLOR_RED,"Du musst das Tutorial abschließen um spielen zu können. Dein Account wurde gelöscht.");
		    Kick(playerid);
			RemovePlayer(playerid);
		}
		else
		{
			switch(listitem)
			{
				case 0: mysql_SetString("benutzer","Heimat","ls","Name",name);
				case 1: mysql_SetString("benutzer","Heimat","lv","Name",name);
				case 2: mysql_SetString("benutzer","Heimat","sf","Name",name);
			}
			new home[20];
			SendClientMessage(playerid, COLOR_GREEN, "Du bist nun komplett registriert. Willkommen hier bei uns ;)");
			SendClientMessage(playerid, COLOR_GREEN, "Wenn du noch Fragen hast, stelle diese im Forum, über /o, /ticket oder nutze /hilfe. Man wird dir gerne weiterhelfen.");
			GetPVarString(playerid,"heimat",home,20);
			SetPVarInt(playerid,"tutorial",0);
			SetPlayerSkin(playerid, 61);
			TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			if(!strcmp(home,"ls"))
			{
			   	SetPlayerPos(playerid,1887.5907,-2393.4739,13.5391);
			   	SetPlayerFacingAngle(playerid,281.8907);
			}
			else if(!strcmp(home,"lv"))
			{
	  			SetPlayerPos(playerid,1595.2727,1448.6219,10.8282);
		    	SetPlayerFacingAngle(playerid,86.6821);
			}
			else if(!strcmp(home,"sf"))
			{
				SetPlayerPos(playerid,-1264.0547,23.0747,14.1484);
			    SetPlayerFacingAngle(playerid,133.7686);
			}
		}
	}

	//                                      LOGIN
	//                                      LOGIN
	//                                      LOGIN
	if(dialogid == login && response)
	{
	    new pw[256];
	    pw = mysql_GetString("benutzer", "Passwort", "Name", name);
	    if(strcmp(pw, inputtext)) SendClientMessage(playerid, COLOR_RED, "* Das eingegebene Passwort ist falsch.");
	    else
	    {
     		SetPVarInt(playerid, "loggedin", 1);
			if(GetPVarInt(playerid, "tutorial") == 1)
			{
				ShowPlayerDialog(playerid, tut1, DIALOG_STYLE_MSGBOX, "Tutorial", "Wenn du online kommst, fragst du dich bestimmt, was du zu tun hast.\nEine kleine Hilfe, falls du noch fragen hast: Mit /o kannst du mit jedem sprechen.\n\nBei Cleared to Land ist es dein Ziel die Luftfahrt so realistisch\nwie möglich nachzuspielen. Dafür stehen dir 3 Berufe zur Auswahl.", "Weiter", "Abbrechen");
	        	TextDrawHideForPlayer(playerid, Welcomeeins);
				TextDrawHideForPlayer(playerid, Welcomezwei);
				TextDrawHideForPlayer(playerid, Welcomedrei);
				TextDrawHideForPlayer(playerid, Welcomefo);
				TextDrawHideForPlayer(playerid, Welcomesz);
				TextDrawHideForPlayer(playerid, Welcomesd);
			}
			else
			{
				LoadPlayer(playerid);
				SetPVarInt(playerid,"tutorial",0);
			   	TogglePlayerControllable(playerid, 1);
	        	SetCameraBehindPlayer(playerid);
	        	TextDrawHideForPlayer(playerid, Welcomeeins);
				TextDrawHideForPlayer(playerid, Welcomezwei);
				TextDrawHideForPlayer(playerid, Welcomedrei);
				TextDrawHideForPlayer(playerid, Welcomefo);
				TextDrawHideForPlayer(playerid, Welcomesz);
				TextDrawHideForPlayer(playerid, Welcomesd);
				new home[20];
				new logname[128];
				format(logname,128,"/logs/%s-Log.txt",name);
				fcreate(logname);
				GetPVarString(playerid,"heimat",home,20);
				SetPlayerSkin(playerid, 61);
				if(!strcmp(home,"ls"))
				{
				    SetPlayerPos(playerid,1887.5907,-2393.4739,13.5391);
				    SetPlayerFacingAngle(playerid,281.8907);
				}
				else if(!strcmp(home,"lv"))
				{
				    SetPlayerPos(playerid,1595.2727,1448.6219,10.8282);
				    SetPlayerFacingAngle(playerid,86.6821);
				}
				else if(!strcmp(home,"sf"))
				{
				    SetPlayerPos(playerid,-1264.0547,23.0747,14.1484);
				    SetPlayerFacingAngle(playerid,133.7686);
				}
	        }
	        Menu[playerid] = 0;
	    }
	    return 1;
	}

	//                                      REGISTER
	//                                      REGISTER
	//                                      REGISTER
	if(dialogid == register1 && response)
	{
	    CreateAccount(playerid, inputtext);
		ShowPlayerDialog(playerid, register2, DIALOG_STYLE_LIST, "Geheime Frage auswählen", "Wie ist der Name deiner Mutter?\nWie heißt dein Haustier?\nWo bist du geboren?", "Weiter", "Abbrechen");
		return 1;
	}

	if(dialogid == ticketdia1 && response)
	{
	    SetPVarString(playerid,"title",inputtext);
	    new text[128];
	    format(text,128,"Bitte gib nun den Text zum Thema \'%s\' ein.",inputtext);
	    ShowPlayerDialog(playerid,ticketdia2,DIALOG_STYLE_INPUT,"Text",text,"Absenden", "Abbrechen");
		return 1;
	}

	if(dialogid == ticketdia2)
	{
	    if(!response) return DeletePVar(playerid,"title");
	    else {
	        new title[128], text[256];
			GetPVarString(playerid,"title",title,128);
			format(text,256,"Dein Ticket mit dem Titel \'%s\' wurde erfolgreich übermittelt.",title);
	    	SetPVarString(playerid,"title",inputtext);
			SendTicket(playerid,title,inputtext);
			SendClientMessage(playerid,COLOR_GREEN,text);
		}
	    return 1;
	}

	if(dialogid == register2)
	{
	    if(!response) RemovePlayer(playerid);
	    else
	    {
	    	SetPVarInt(playerid, "tutorial", 0);
	        switch(listitem)
	        {
	            case 0:
				{
	                mysql_SetString("benutzer","Frage","Mutter","Name",name);
					ShowPlayerDialog(playerid, register3, DIALOG_STYLE_INPUT, "Geheime Frage beatnworten", "Bitte beantworte nun, wie deine Mutter heißt.", "Akzeptieren", "Abbrechen");
				}

	            case 1:
				{
	                mysql_SetString("benutzer","Frage","Haustier","Name",name);
					ShowPlayerDialog(playerid, register3, DIALOG_STYLE_INPUT, "Geheime Frage beatnworten", "Bitte beantworte nun, wie dein Haustier heißt.", "Akzeptieren", "Abbrechen");
				}

	            case 2:
	            {
	                mysql_SetString("benutzer","Frage","Geburtsort","Name",name);
					ShowPlayerDialog(playerid, register3, DIALOG_STYLE_INPUT, "Geheime Frage beatnworten", "Bitte beantworte nun, was dein Geburtsort ist.", "Akzeptieren", "Abbrechen");
				}
	        }
	    }
	    return 1;
	}

	if(dialogid == register3)
	{
	    if(!response) RemovePlayer(playerid);
	    else
	    {
	        mysql_SetString("benutzer","Antwort",inputtext,"Name",name);
			SendClientMessage(playerid, COLOR_GREEN, "Herzlichen Glückwunsch! Du bist nun erfolgreich bei \"Cleared to Land\" registriert. Du kannst dich nun einloggen.");
			SetPVarInt(playerid, "loggedin", 1);
			SetPVarInt(playerid, "tutorial", 1);
	    }
	    return 1;
	}

	//                                      PW Vergessen
	//                                      PW Vergessen
	//                                      PW Vergessen
	if(dialogid == lostpw && response)
	{
	    new answer[256];
		answer = dini_Get(path, "Antwort");

		if(!strcmp(answer,inputtext))
		{
		    mysql_SetString("benutzer", "Passwort", lostpws[random(15)], "Name", name);
			new string[128], pw[256];
			pw = dini_Get(path, "PW");
			format(string, 128, "* Dir wurde das Passwort \"%s\" zugeteilt. Ändere dies bitte nach dem Login mit /pwchange.", pw);
			SendClientMessage(playerid, COLOR_GREEN, string);
		}
		else SendClientMessage(playerid, COLOR_RED, "* Deine Antwort war nicht korrekt.");
		return 1;
	}

	//                                      PW ÄNDERN
	//                                      PW ÄNDERN
	//                                      PW ÄNDERN
	if(dialogid == pwchange && response)
	{
 		new string[128];
   		dini_Set(path, "PW", inputtext);
		format(string, 128, "Dein Passwort wurde erfolgreich auf \"%s\" geändert.", inputtext);
		SendClientMessage(playerid, COLOR_GREEN, string);
  		return 1;
  	}

  	if(dialogid == adminlist && response)
	{
	    switch(listitem)
		{
		    case 5: Kick(GetPVarInt(playerid,"clicked"));
		    case 6: RangeBan(GetPVarInt(playerid,"clicked"));
		    case 7: ShowPlayerDialog(playerid, tempban, DIALOG_STYLE_INPUT, "Temporärer Ban", "Wie lange möchtest du den Spieler in\nMinuten vom Server verweisen?", "Annehmen", "Abbrechen");
		    case 0:
			{
			    TogglePlayerSpectating(playerid,1);
				PlayerSpectatePlayer(playerid,GetPVarInt(playerid,"clicked"),SPECTATE_MODE_NORMAL);
				SetPVarInt(playerid,"spectating",1);
				new cName[MAX_PLAYER_NAME],message[128];
				GetPlayerName(GetPVarInt(playerid,"clicked"),cName,MAX_PLAYER_NAME);
				format(message,128,"Du beobachtest nun %s. Um dies zu beenden gib /stop ein.",cName);
				SendClientMessage(playerid,COLOR_GREEN,message);
			}
		    case 1:
			{
			    new Float:x, Float:y, Float:z;
			    GetPlayerPos(GetPVarInt(playerid,"clicked"), x, y, z);
				SetPlayerPos(playerid, x+0.5, y, z);
			}
		    case 2:
			{
   				new Float:x, Float:y, Float:z;
			    GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(GetPVarInt(playerid,"clicked"), x+0.5, y, z);
				SendClientMessage(GetPVarInt(playerid,"clicked"), COLOR_ORANGE, "Du wurdest zu einem Admin teleportiert.");
			}
		    case 3: OpenTicket(playerid, GetPVarInt(playerid,"clicked"));
		    case 4:
			{
				if(GetPVarInt(GetPVarInt(playerid, "clicked"), "muted") == 0)
				{
				    SetPVarInt(GetPVarInt(playerid, "clicked"), "muted", 1);
				    SendClientMessage(GetPVarInt(playerid, "clicked"), COLOR_ORANGE, "Du wurdest von einem Admin stumm geschaltet.");
				    SendClientMessage(playerid, COLOR_ORANGE, "Du hast den Spieler stummgeschaltet.");
				}
				else
				{
				    SetPVarInt(GetPVarInt(playerid, "clicked"), "muted", 0);
				    SendClientMessage(GetPVarInt(playerid, "clicked"), COLOR_ORANGE, "Du kannst nun wieder reden.");
				    SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler kann wieder reden.");
				}
			}
   			case 8:
			{
				if(GetPVarInt(GetPVarInt(playerid, "clicked"), "freezed") == 0)
				{
				    SetPVarInt(GetPVarInt(playerid, "clicked"), "freezed", 1);
				    SendClientMessage(GetPVarInt(playerid, "clicked"), COLOR_ORANGE, "Du wurdest von einem Admin gefreezed.");
				    TogglePlayerControllable(GetPVarInt(playerid, "clicked"), 0);
				    SendClientMessage(playerid, COLOR_ORANGE, "Du hast den Spieler gefreezed.");
				}
				else
				{
				    SetPVarInt(GetPVarInt(playerid, "clicked"), "freezed", 0);
					TogglePlayerControllable(GetPVarInt(playerid, "clicked"), 1);
				    SendClientMessage(GetPVarInt(playerid, "clicked"), COLOR_ORANGE, "Du kannst dich nun wieder bewegen.");
				    SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler kann sich wieder bewegen..");
				}
			}
		}
		return 1;
	}

	if(dialogid == regeln1 && response)
	{
		ShowPlayerDialog(playerid, regeln2, DIALOG_STYLE_MSGBOX, "Serverregeln (Seite 2)", "5.) Unsere Admins kümmern sich gerne um euch. Geduld ist jedoch hierbei auch gefragt.\n5.1) Deswegen bitten wir euch /report nicht zu missbrauchen.\n6.) Wir bitten euch Buguser und Hacker per /report zu melden. Vielen Dank!\n7.) Nun Viel Spaß auf 'SERVERNAME' wünscht euch das Server Team.", "Schließen", "Zurück");
	    return 1;
	}

	if(dialogid == regeln2 && !response)
	{
		ShowPlayerDialog(playerid, regeln1, DIALOG_STYLE_MSGBOX, "Serverregeln", "1.) Buguser und Hacker werden mit einem Ban bestraft.\n2.) Das Fahren auf den Start- und Landebahnen während einem Start oder einer Landung ist untersagt.\n3.) Das mutwillige Zerstören anderer Fahrzeuge ist ebenfalls strengstens untersagt.\n4.) Das Benutzen der Start- und Landebahnen beim Anfliegen und Landen eines Flughafen ist Pflicht.", "Weiter", "Schließen");
		return 1;
	}

	if(dialogid == help1 && response)
	{
	    switch(listitem)
	    {
			case 0: ShowPlayerDialog(playerid, help2, DIALOG_STYLE_MSGBOX, "Hilfeseite - Allgemeines", "/info - Zeigt eine Info an.\n/pwchange - Ändert das Passwort\n/change - Ändert den aktuellen Beruf u./o. den Heimatflughafen\nNumpad 4 - Startet den Motor oder schaltet ihn ab\nNumpad 6 - Schaltet die Fahrzeuglichter ein oder aus ", "Weiter", "Schließen");
			case 1: ShowPlayerDialog(playerid, help3, DIALOG_STYLE_MSGBOX, "Hilfeseite - Chat", "/freq [ID] - Ändert die Funkfrequenz\n/a - Chat auf der aktuellen Frequenz\n/atc - Chat für alle ATC's\n/b - Chat zwischen Delivery und Boden\n", "Weiter", "Schließen");
			case 2: ShowPlayerDialog(playerid, help4, DIALOG_STYLE_MSGBOX, "Hilfeseite - Probleme", "/ticket - Schreibt ein Ticket\n/tchat - Startet/Beendet den Ticketchat mit einem Admin\n/report - Meldet einen Spieler oder Bug", "Weiter", "Schließen");
			case 3: ShowPlayerDialog(playerid, help5, DIALOG_STYLE_MSGBOX, "Hilfeseite - Piloten", "/freq [ID] - Ändert die Funkfrequenz\n/a [Text] - Sendet auf der aktuellen Frequenz\n/flug - Öffnet das Auswahlfenster für die Flüge", "Weiter", "Schließen");
			case 4: ShowPlayerDialog(playerid, help6, DIALOG_STYLE_MSGBOX, "Hilfeseite - ATC's", "/campos o. /cam (oder Duck-Taste) - Öffnet das Auswahlmenü für die nutzbaren Kameras\n/freq [ID] - Ändert die Funkfrequenz\n/a [Text] - Sendet auf der aktuellen Frequenz\n/b - Chat zwischen Delivery und Boden", "Weiter", "Schließen");
			case 5: ShowPlayerDialog(playerid, help7, DIALOG_STYLE_MSGBOX, "Hilfeseite - Bodenpersonal", "/betanken - Betankt das nächste Luftfahrzeug\n/tanken - Tankt an einer Tankstelle das eigene Fahrzeug und ggf. den Anhänger\n/reparieren - Repariert das nächste Luftfahrzeug wenn Utility Van in der Nähe\n/verarzten - Verarztet den Spieler der mit einem im Krankenwagen sitzt\n/bChattet mit dem Delivery/Bodenpersonal\n/de - Koppelt den Anhänger ab", "Weiter", "Schließen");
			case 6: ShowPlayerDialog(playerid, help8, DIALOG_STYLE_MSGBOX, "Hilfeseite - Administration", "/setweather [ID] - Ändert das allgemeine Wetter\n/settime [ID] - Ändert die allgemeine Zeit\n/restart - Startet den Server neu\nTab-Menü: Klick auf Spieler öffnet Auswahlliste\n/adm - Erzeugt eine Adminansage", "Weiter", "Schließen");
		}
		return 1;
	}

	if(dialogid == airportsel && response)
	{
	    switch(listitem)
		{
			case 0:
			{
			   	SetPlayerPos(playerid,1887.5907,-2393.4739,13.5391);
			   	SetPlayerFacingAngle(playerid,281.8907);
			  	SetPlayerSkin(playerid, 61);
			  	SetPVarString(playerid,"heimat","ls");
			  	mysql_SetString("benutzer","Heimat","ls","Name",name);
			}
 			case 1:
			{
				SetPlayerPos(playerid,-1264.0547,23.0747,14.1484);
				SetPlayerFacingAngle(playerid,133.7686);
			 	SetPlayerSkin(playerid, 61);
			  	SetPVarString(playerid,"heimat","sf");
			  	mysql_SetString("benutzer","Heimat","sf","Name",name);
			}
			case 2:
			{
			  	SetPlayerPos(playerid,1595.2727,1448.6219,10.8282);
				SetPlayerFacingAngle(playerid,86.6821);
			    SetPlayerSkin(playerid, 61);
			  	SetPVarString(playerid,"heimat","lv");
			  	mysql_SetString("benutzer","Heimat","lv","Name",name);
			}
		}
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);
	    return 1;
	}

	if(dialogid == changefrak && response)
	{
		new home[20];
		GetPVarString(playerid,"heimat",home,20);
		IsATC[playerid] = false;
		atcbelegt[ATCPos[playerid]] = false;
		ATCPos[playerid] = 0;
		switch(listitem)
		{
			case 0:
			{
				if(!strcmp(home,"ls"))
				{
				   	SetPlayerPos(playerid,1887.5907,-2393.4739,13.5391);
				   	SetPlayerFacingAngle(playerid,281.8907);
		  			SetPlayerSkin(playerid, 61);
				}
				else if(!strcmp(home,"lv"))
				{
		  			SetPlayerPos(playerid,1595.2727,1448.6219,10.8282);
			    	SetPlayerFacingAngle(playerid,86.6821);
		    		SetPlayerSkin(playerid, 61);
				}
				else if(!strcmp(home,"sf"))
				{
					SetPlayerPos(playerid,-1264.0547,23.0747,14.1484);
				    SetPlayerFacingAngle(playerid,133.7686);
		   			SetPlayerSkin(playerid, 61);
				}
				TogglePlayerControllable(playerid, 1);
				SetCameraBehindPlayer(playerid);
				SetPlayerColor(playerid, COLOR_YELLOW);
			}
			case 1:
			{
				if(!strcmp(home,"ls"))
				{
				   	SetPlayerPos(playerid,2019.4186,-2443.2949,13.5469);
				   	SetPlayerFacingAngle(playerid,87.9982);
		  			SetPlayerSkin(playerid, 16);
				}
				else if(!strcmp(home,"lv"))
				{
		  			SetPlayerPos(playerid,1318.7860,1256.9487,10.8203);
			    	SetPlayerFacingAngle(playerid,0.8514);
		   			SetPlayerSkin(playerid, 16);
				}
				else if(!strcmp(home,"sf"))
				{
					SetPlayerPos(playerid,-1225.8724,49.1484,14.1346);
				    SetPlayerFacingAngle(playerid,226.0345);
		   			SetPlayerSkin(playerid, 16);
				}
				TogglePlayerControllable(playerid, 1);
				SetCameraBehindPlayer(playerid);
				SetPlayerColor(playerid, COLOR_GREEN);
			}
			case 2:
			{
				ShowPlayerDialog(playerid, atcpos, DIALOG_STYLE_LIST, "Position auswählen.", "Tower\nDelivery","Auswählen","Abbrechen");
			}
		}
		return 1;
	}

	if(dialogid == atcpos && response)
	{
		new home[20], atc;
		GetPVarString(playerid,"heimat",home,20);
		switch(listitem)
		{
		    case 0: atc=0;
		    case 1: atc=1;
		}
		if(!strcmp(home,"ls") && atc==1)
		{
		    if(atcbelegt[2] == true) SendClientMessage(playerid, COLOR_RED, "* Los Santos Delivery ist bereits besetzt.");
		    else
			{
			    TogglePlayerControllable(playerid, 0);
			    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun Los Santos Delivery.");
			    atcbelegt[2] = true;
			    ATCPos[playerid] = 2;
			    SetPlayerSkin(playerid, 185);
			    SetPlayerColor(playerid,0xFFFFFF00);
			}
		}
		else if(!strcmp(home,"ls") && atc==0)
		{
		    if(atcbelegt[1] == true) SendClientMessage(playerid, COLOR_RED, "* Los Santos Tower ist bereits besetzt.");
		    else
			{
			    TogglePlayerControllable(playerid, 0);
			    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun Los Santos Tower.");
			    atcbelegt[1] = true;
			    ATCPos[playerid] = 1;
			    SetPlayerSkin(playerid, 295);
			    SetPlayerColor(playerid,0xFFFFFF00);
			}
		}
		else if(!strcmp(home,"sf") && atc==1)
		{
		    if(atcbelegt[4] == true) SendClientMessage(playerid, COLOR_RED, "* San Fierro Delivery ist bereits besetzt.");
		    else
			{
			    TogglePlayerControllable(playerid, 0);
			    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun San Fierro Delivery.");
			    atcbelegt[4] = true;
			    ATCPos[playerid] = 4;
			    SetPlayerSkin(playerid, 185);
			    SetPlayerColor(playerid,0xFFFFFF00);
			}
		}
		else if(!strcmp(home,"sf") && atc==0)
		{
		    if(atcbelegt[3] == true) SendClientMessage(playerid, COLOR_RED, "* San Fierro Tower ist bereits besetzt.");
		    else
			{
			    TogglePlayerControllable(playerid, 0);
			    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun San Fierro Tower.");
			    atcbelegt[3] = true;
			    ATCPos[playerid] = 3;
			    SetPlayerSkin(playerid, 295);
			    SetPlayerColor(playerid,0xFFFFFF00);
			}
		}
 		else if(!strcmp(home,"lv") && atc==1)
		{
		    if(atcbelegt[6] == true) SendClientMessage(playerid, COLOR_RED, "* Las Venturas Delivery ist bereits besetzt.");
		    else
			{
			    TogglePlayerControllable(playerid, 0);
 			    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun Las Venturas Delivery.");
			    atcbelegt[6] = true;
			    ATCPos[playerid] = 6;
			    SetPlayerSkin(playerid, 185);
			    SetPlayerColor(playerid,0xFFFFFF00);
			}
		}
		else if(!strcmp(home,"lv") && atc==0)
		{
		    if(atcbelegt[5] == true) SendClientMessage(playerid, COLOR_RED, "* Las Venturas Tower ist bereits besetzt.");
		    else
			{
			    TogglePlayerControllable(playerid, 0);
 			    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun Las Venturas Tower.");
			    atcbelegt[5] = true;
			    ATCPos[playerid] = 5;
			    SetPlayerSkin(playerid, 295);
			    SetPlayerColor(playerid,0xFFFFFF00);
			}
		}
	    return 1;
	}

	if(dialogid == camdia && response)
	{
	    if(ATCPos[playerid]==1) // LS Tower
		{
		    switch(listitem)
			{
			    case 0:
			    {
			        SetPlayerCameraPos(playerid, 2069.0923,-2413.9722,15.6339);
			        SetPlayerCameraLookAt(playerid, 2029.6780,-2420.3330,13.5609 );
					SetPlayerPos(playerid, 2029.6780,-2420.3330,13.5609);
				    }
			    case 1:
			    {
			        SetPlayerCameraPos(playerid, 2016.0771,-2283.4104,25.1345);
			        SetPlayerCameraLookAt(playerid, 1940.8021,-2295.1929,13.5585);
					SetPlayerPos(playerid, 1940.8021,-2295.1929,13.5585);
			    }
			    case 2:
			    {
			        SetPlayerCameraPos(playerid, 1893.2424,-2444.3662,21.9086 );
			        SetPlayerCameraLookAt(playerid, 1809.7372,-2433.5837,13.9491);
					SetPlayerPos(playerid, 1809.7372,-2433.5837,13.9491);
			    }
			    case 3:
			    {
			        SetPlayerCameraPos(playerid, 1516.5488,-2451.6758,13.5671);
			        SetPlayerCameraLookAt(playerid, 1473.0958,-2448.2026,13.7109);
					SetPlayerPos(playerid, 1473.0958,-2448.2026,13.7109);
			    }
 			    case 4:
			    {
			        SetPlayerCameraPos(playerid, 1689.6501,-2610.3528,23.4858);
			        SetPlayerCameraLookAt(playerid, 1773.6896,-2621.0220,16.5172);
					SetPlayerPos(playerid, 1773.6896,-2621.0220,16.5172);
			    }
			    case 5:
			    {
			        SetPlayerCameraPos(playerid, 31935.8512,-2621.6885,23.2747);
			        SetPlayerCameraLookAt(playerid, 1987.1862,-2637.6953,13.5546);
					SetPlayerPos(playerid, 1987.1862,-2637.6953,13.5546);
			    }
			    case 6:
			    {
			        SetPlayerCameraPos(playerid, 1672.7817,-2488.5015,14.0729);
			        SetPlayerCameraLookAt(playerid, 1466.2047,-2491.3423,31.0082);
					SetPlayerPos(playerid, 1466.2047,-2491.3423,31.0082);
			    }
			    case 7:
			    {
			        SetPlayerCameraPos(playerid, 1918.1821,-2489.5869,14.0301);
			        SetPlayerCameraLookAt(playerid, 2114.6748,-2506.2595,33.8654);
					SetPlayerPos(playerid, 2114.6748,-2506.2595,33.8654);
			    }
			    case 8:
			    {
			        SetPlayerCameraPos(playerid, 2077.5803,-2626.1116,16.0008);
			        SetPlayerCameraLookAt(playerid, 2010.0466,-2524.5459,14.0213);
					SetPlayerPos(playerid, 2010.0466,-2524.5459,14.0213);
			    }
			    case 9:
			    {
			        SetPlayerCameraPos(playerid, 1530.2817,-2430.4141,24.0547);
			        SetPlayerCameraLookAt(playerid, 1536.2253,-2512.3474,13.5547);
					SetPlayerPos(playerid, 1536.2253,-2512.3474,13.5547);
			    }
			}
		}

	    if(ATCPos[playerid]==2) // LS Delivery
		{
		    switch(listitem)
			{
			    case 0:
			    {
			        SetPlayerCameraPos(playerid, 2069.0923,-2413.9722,15.6339);
			        SetPlayerCameraLookAt(playerid, 2029.6780,-2420.3330,13.5609);
					SetPlayerPos(playerid, 2029.6780,-2420.3330,13.5609);
			    }
			    case 1:
			    {
			        SetPlayerCameraPos(playerid, 2016.0771,-2283.4104,25.1345);
			        SetPlayerCameraLookAt(playerid, 1940.8021,-2295.1929,13.5585);
					SetPlayerPos(playerid, 1940.8021,-2295.1929,13.5585);
			    }
			    case 2:
			    {
			        SetPlayerCameraPos(playerid, 1893.2424,-2444.3662,21.9086 );
			        SetPlayerCameraLookAt(playerid, 1809.7372,-2433.5837,13.9491);
					SetPlayerPos(playerid, 1809.7372,-2433.5837,13.9491);
			    }
			    case 3:
			    {
			        SetPlayerCameraPos(playerid, 1516.5488,-2451.6758,13.5671);
			        SetPlayerCameraLookAt(playerid, 1473.0958,-2448.2026,13.7109);
					SetPlayerPos(playerid, 1473.0958,-2448.2026,13.7109);
			    }
 			    case 4:
			    {
			        SetPlayerCameraPos(playerid, 1689.6501,-2610.3528,23.4858);
			        SetPlayerCameraLookAt(playerid, 1773.6896,-2621.0220,16.5172);
					SetPlayerPos(playerid, 1773.6896,-2621.0220,16.5172);
			    }
			    case 5:
			    {
			        SetPlayerCameraPos(playerid, 1935.8512,-2621.6885,23.2747);
			        SetPlayerCameraLookAt(playerid, 1987.1862,-2637.6953,13.5546);
			        SetPlayerPos(playerid, 1987.1862,-2637.6953,13.5546);
			    }
			}
		}

		if(ATCPos[playerid]==3) // SF Tower
		{
		    switch(listitem)
		    {
		        case 0:
		        {
			        SetPlayerCameraPos(playerid, -1605.5503,-267.1962,15.5580);
			        SetPlayerCameraLookAt(playerid, -1637.9828,-332.0667,14.2382);
			        SetPlayerPos(playerid, -1637.9828,-332.0667,14.2382);
		        }
 		        case 1:
		        {
			        SetPlayerCameraPos(playerid, -1398.7167,-633.4633,27.6286);
			        SetPlayerCameraLookAt(playerid, -1442.5631,-576.4445,14.2383);
			        SetPlayerPos(playerid, -1442.5631,-576.4445,14.2383);
		        }
   		        case 2:
		        {
			        SetPlayerCameraPos(playerid, -1396.5505,-594.1735,21.6171);
			        SetPlayerCameraLookAt(playerid, -1286.0836,-610.2614,14.2839);
			        SetPlayerPos(playerid, -1286.0836,-610.2614,14.2839);
		        }
   		     	case 3:
		        {
			        SetPlayerCameraPos(playerid, -1317.3910,-563.7603,14.2873);
			        SetPlayerCameraLookAt(playerid, -1347.2700,-520.4489,14.2382);
			        SetPlayerPos(playerid, -1347.2700,-520.4489,14.2382);
		        }
   		     	case 4:
		        {
			        SetPlayerCameraPos(playerid,-1306.8662,-489.7276,18.2395);
			        SetPlayerCameraLookAt(playerid,-1331.2623,-435.2730,14.1484);
			        SetPlayerPos(playerid, -1331.2623,-435.2730,14.1484);
		        }
   		     	case 5:
		        {
			        SetPlayerCameraPos(playerid,-1330.6350,-297.2534,14.1440);
			        SetPlayerCameraLookAt(playerid,-1346.6771,-251.1868,14.6484);
			        SetPlayerPos(playerid, -1346.6771,-251.1868,14.6484);
		        }
    		    case 6:
		        {
			        SetPlayerCameraPos(playerid,-1327.3856,-120.7318,17.1484);
			        SetPlayerCameraLookAt(playerid,-1249.6191,-121.6836,14.1440);
			        SetPlayerPos(playerid, -1249.6191,-121.6836,14.1440);
		        }
     		    case 7:
		        {
			        SetPlayerCameraPos(playerid,-1204.8334,74.2737,19.1372);
			        SetPlayerCameraLookAt(playerid,-1193.6434,41.8422,14.1484);
			        SetPlayerPos(playerid, -1193.6434,41.8422,14.1484);
		        }
     		    case 8:
		        {
			        SetPlayerCameraPos(playerid,-1501.5397,-5.8517,15.3422);
			        SetPlayerCameraLookAt(playerid,-1673.1453,-181.1142,36.8453);
			        SetPlayerPos(playerid, -1673.1453,-181.1142,36.8453);
		        }
     		    case 9:
		        {
			        SetPlayerCameraPos(playerid,-1283.6541,208.4364,15.7287);
			        SetPlayerCameraLookAt(playerid,-1123.8953,374.3117,49.3723);
			        SetPlayerPos(playerid, -1123.8953,374.3117,49.3723);
		        }
     		    case 10:
		        {
			        SetPlayerCameraPos(playerid,-1249.1616,205.3566,36.0623);
			        SetPlayerCameraLookAt(playerid,-1450.9298,19.9353,15.8628);
			        SetPlayerPos(playerid,-1450.9298,19.9353,15.8628);
		        }
     		    case 11:
		        {
			        SetPlayerCameraPos(playerid,-1650.6519,-295.7992,56.4652);
			        SetPlayerCameraLookAt(playerid,-1603.3223,-115.1624,15.4074);
			        SetPlayerPos(playerid,-1603.3223,-115.1624,15.4074);
		        }
		    }
		}

		if(ATCPos[playerid]==4) // SF Delivery
		{
		    switch(listitem)
		    {
		        case 0:
		        {
			        SetPlayerCameraPos(playerid, -1605.5503,-267.1962,15.5580);
			        SetPlayerCameraLookAt(playerid, -1637.9828,-332.0667,14.2382);
			        SetPlayerPos(playerid, -1637.9828,-332.0667,14.2382);
		        }
 		        case 1:
		        {
			        SetPlayerCameraPos(playerid, -1398.7167,-633.4633,27.6286);
			        SetPlayerCameraLookAt(playerid, -1442.5631,-576.4445,14.2383);
			        SetPlayerPos(playerid, -1442.5631,-576.4445,14.2383);
		        }
   		        case 2:
		        {
			        SetPlayerCameraPos(playerid, -1396.5505,-594.1735,21.6171);
			        SetPlayerCameraLookAt(playerid, -1286.0836,-610.2614,14.2839);
			        SetPlayerPos(playerid, -1286.0836,-610.2614,14.2839);
		        }
   		     	case 3:
		        {
			        SetPlayerCameraPos(playerid, -1317.3910,-563.7603,14.2873);
			        SetPlayerCameraLookAt(playerid, -1347.2700,-520.4489,14.2382);
			        SetPlayerPos(playerid, -1347.2700,-520.4489,14.2382);
		        }
   		     	case 4:
		        {
			        SetPlayerCameraPos(playerid,-1306.8662,-489.7276,18.2395);
			        SetPlayerCameraLookAt(playerid,-1331.2623,-435.2730,14.1484);
			        SetPlayerPos(playerid, -1331.2623,-435.2730,14.1484);
		        }
   		     	case 5:
		        {
			        SetPlayerCameraPos(playerid,-1330.6350,-297.2534,14.1440);
			        SetPlayerCameraLookAt(playerid,-1346.6771,-251.1868,14.6484);
			        SetPlayerPos(playerid, -1346.6771,-251.1868,14.6484);
		        }
    		    case 6:
		        {
			        SetPlayerCameraPos(playerid,-1327.3856,-120.7318,17.1484);
			        SetPlayerCameraLookAt(playerid,-1249.6191,-121.6836,14.1440);
			        SetPlayerPos(playerid, -1249.6191,-121.6836,14.1440);
		        }
     		    case 7:
		        {
			        SetPlayerCameraPos(playerid,-1204.8334,74.2737,19.1372);
			        SetPlayerCameraLookAt(playerid,-1193.6434,41.8422,14.1484);
			        SetPlayerPos(playerid, -1193.6434,41.8422,14.1484);
		        }
		        case 8:
		        {
		            SetPlayerCameraPos(playerid,1519.2653,1725.2975,11.7436);
			        SetPlayerCameraLookAt(playerid,1532.7555,1809.7424,11.7426);
			        SetPlayerPos(playerid,1532.7555,1809.7424,11.7426);
		        }
		    }
		}

	    if(ATCPos[playerid]==6)
		{
		    switch(listitem)
			{
			    case 0:
			    {
			        SetPlayerCameraPos(playerid, 1358.7452,1310.0436,13.0997);
			        SetPlayerCameraLookAt(playerid, 1347.7955,1259.5082,10.8203 );
					SetPlayerPos(playerid, 1347.7955,1259.5082,10.8203 );
			    }
			    case 1:
			    {
			        SetPlayerCameraPos(playerid, 1329.8752,1262.3818,16.6468);
			        SetPlayerCameraLookAt(playerid, 1302.3320,1275.2554,10.8203);
					SetPlayerPos(playerid, 1302.3320,1275.2554,10.8203);
			    }
			    case 2:
			    {
			        SetPlayerCameraPos(playerid, 1305.7626,1324.3057,10.8203);
			        SetPlayerCameraLookAt(playerid, 1269.0675,1324.0482,10.8130);
					SetPlayerPos(playerid, 1269.0675,1324.0482,10.8130);
			    }
			    case 3:
			    {
			        SetPlayerCameraPos(playerid, 1305.5782,1361.6316,10.8203);
			        SetPlayerCameraLookAt(playerid, 1274.4359,1361.2046,10.8130);
					SetPlayerPos(playerid, 1274.4359,1361.2046,10.8130);
			    }
 			    case 4:
			    {
			        SetPlayerCameraPos(playerid, 1272.4406,1397.4143,11.8203);
			        SetPlayerCameraLookAt(playerid, 1328.5470,1404.1776,10.8203);
					SetPlayerPos(playerid, 1328.5470,1404.1776,10.8203);
			    }
			    case 5:
			    {
			        SetPlayerCameraPos(playerid, 1354.3717,1466.1500,11.8203);
			        SetPlayerCameraLookAt(playerid, 1320.5688,1504.4874,10.8203);
			        SetPlayerPos(playerid, 1320.5688,1504.4874,10.8203);
			    }
  			    case 6:
			    {
			        SetPlayerCameraPos(playerid, 1323.6572,1602.8706,11.3203);
			        SetPlayerCameraLookAt(playerid, 1340.4393,1549.4142,10.8203);
					SetPlayerPos(playerid, 1340.4393,1549.4142,10.8203);
			    }
			    case 7:
			    {
			        SetPlayerCameraPos(playerid, 1348.9200,1654.9590,16);
			        SetPlayerCameraLookAt(playerid, 1348.9365,1709.2648,10.8203);
			        SetPlayerPos(playerid, 1348.9365,1709.2648,10.8203);
			    }
		        case 8:
		        {
		            SetPlayerCameraPos(playerid,1519.2653,1725.2975,11.7436);
			        SetPlayerCameraLookAt(playerid,1532.7555,1809.7424,11.7426);
			        SetPlayerPos(playerid,1532.7555,1809.7424,11.7426);
		        }
			}
		}

	    if(ATCPos[playerid]==5)
		{
		    switch(listitem)
			{
			    case 0:
			    {
			        SetPlayerCameraPos(playerid, 1358.7452,1310.0436,13.0997);
			        SetPlayerCameraLookAt(playerid, 1347.7955,1259.5082,10.8203 );
					SetPlayerPos(playerid, 1347.7955,1259.5082,10.8203 );
			    }
			    case 1:
			    {
			        SetPlayerCameraPos(playerid, 1329.8752,1262.3818,16.6468);
			        SetPlayerCameraLookAt(playerid, 1302.3320,1275.2554,10.8203);
					SetPlayerPos(playerid, 1302.3320,1275.2554,10.8203);
			    }
			    case 2:
			    {
			        SetPlayerCameraPos(playerid, 1305.7626,1324.3057,10.8203);
			        SetPlayerCameraLookAt(playerid, 1269.0675,1324.0482,10.8130);
					SetPlayerPos(playerid, 1269.0675,1324.0482,10.8130);
			    }
			    case 3:
			    {
			        SetPlayerCameraPos(playerid, 1305.5782,1361.6316,10.8203);
			        SetPlayerCameraLookAt(playerid, 1274.4359,1361.2046,10.8130);
					SetPlayerPos(playerid, 1274.4359,1361.2046,10.8130);
			    }
 			    case 4:
			    {
			        SetPlayerCameraPos(playerid, 1272.4406,1397.4143,11.8203);
			        SetPlayerCameraLookAt(playerid, 1328.5470,1404.1776,10.8203);
					SetPlayerPos(playerid, 1328.5470,1404.1776,10.8203);
			    }
			    case 5:
			    {
			        SetPlayerCameraPos(playerid, 1354.3717,1466.1500,11.8203);
			        SetPlayerCameraLookAt(playerid, 1320.5688,1504.4874,10.8203);
			        SetPlayerPos(playerid, 1320.5688,1504.4874,10.8203);
			    }
  			    case 6:
			    {
			        SetPlayerCameraPos(playerid, 1323.6572,1602.8706,11.3203);
			        SetPlayerCameraLookAt(playerid, 1340.4393,1549.4142,10.8203);
					SetPlayerPos(playerid, 1340.4393,1549.4142,10.8203);
			    }
			    case 7:
			    {
			        SetPlayerCameraPos(playerid, 1348.9200,1654.9590,16);
			        SetPlayerCameraLookAt(playerid, 1348.9365,1709.2648,10.8203);
			        SetPlayerPos(playerid, 1348.9365,1709.2648,10.8203);
			    }
		        case 8:
		        {
		            SetPlayerCameraPos(playerid,1519.2653,1725.2975,11.7436);
			        SetPlayerCameraLookAt(playerid,1532.7555,1809.7424,11.7426);
			        SetPlayerPos(playerid,1532.7555,1809.7424,11.7426);
		        }
  		        case 9:
		        {
		            SetPlayerCameraPos(playerid,1473.1849,1019.1439,52.4424);
			        SetPlayerCameraLookAt(playerid,1463.4523,1309.9186,17.7792);
			        SetPlayerPos(playerid, 1463.4523,1309.9186,17.7792);
		        }
		        case 10:
		        {
		            SetPlayerCameraPos(playerid,1472.8555,1565.5352,13.4089);
			        SetPlayerCameraLookAt(playerid,1481.7695,1785.2157,36.9883);
			        SetPlayerPos(playerid, 1481.7695,1785.2157,36.9883);
		        }
		        case 11:
		        {
		            SetPlayerCameraPos(playerid,1360.0496,1273.0236,13.7423);
			        SetPlayerCameraLookAt(playerid,1448.6135,1315.3910,11.7498);
			        SetPlayerPos(playerid, 1448.6135,1315.3910,11.7498);
		        }
		        case 12:
		        {
		            SetPlayerCameraPos(playerid,1521.8071,1590.3516,13.7424);
			        SetPlayerCameraLookAt(playerid,1433.7700,1716.4385,11.7457);
			        SetPlayerPos(playerid,1433.7700,1716.4385,11.7457);
		        }
			}
		}
		return 1;
	}

	if(dialogid == flug && response)
	{
		if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"ls"))
		{
			switch(listitem)
			{
			    case 0: StartFlug(playerid, true, 2);
			    case 1: StartFlug(playerid, true, 3);
			    case 2: StartFlug(playerid, true, 4);
			    case 3: StartFlug(playerid, true, 5);
			}
		}
		else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"sf"))
		{
			switch(listitem)
			{
			    case 0: StartFlug(playerid, true, 1);
			    case 1: StartFlug(playerid, true, 3);
			    case 2: StartFlug(playerid, true, 4);
			    case 3: StartFlug(playerid, true, 5);
			}
		}
		else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"lv"))
		{
			switch(listitem)
			{
			    case 0: StartFlug(playerid, true, 2);
			    case 1: StartFlug(playerid, true, 1);
			    case 2: StartFlug(playerid, true, 4);
			    case 3: StartFlug(playerid, true, 5);
			}
		}
		else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"mt"))
		{
			switch(listitem)
			{
			    case 0: StartFlug(playerid, true, 2);
			    case 1: StartFlug(playerid, true, 1);
			    case 2: StartFlug(playerid, true, 3);
			    case 3: StartFlug(playerid, true, 4);
			}
		}
		else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"vm"))
		{
			switch(listitem)
			{
			    case 0: StartFlug(playerid, true, 2);
			    case 1: StartFlug(playerid, true, 1);
			    case 2: StartFlug(playerid, true, 3);
			    case 3: StartFlug(playerid, true, 5);
			}
		}
		return 1;
	}

	return 0;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(GetPVarInt(playerid,"admin") >= 2)
	{
	    SetPVarInt(playerid, "clicked", clickedplayerid);
	    ShowPlayerDialog(playerid, adminlist, DIALOG_STYLE_LIST, "Was möchtest du tun?", "Zuschauen\nGoto\nGethere\nTicketchat eröffnen\nStummschalten / Stummschaltung entfernen\nKick\nBan\nTemporärer Ban\nFreezen / Unfreezen", "Auswählen", "Abbrechen");
	}
	if(GetPVarInt(playerid,"admin") == 1)
	{
	    SetPVarInt(playerid, "clicked", clickedplayerid);
	    ShowPlayerDialog(playerid, adminlist, DIALOG_STYLE_LIST, "Was möchtest du tun?", "Zuschauen\nGoto\nGethere\nTicketchat eröffnen\nStummschalten / Stummschaltung entfernen", "Auswählen", "Abbrechen");
	}
	return 1;
}

public LoadCars()
{
	new path[128], id, color1, color2, Float:x, Float:y, Float:z, Float:a, Plate[256];
	for (new i=1; i<MAX_CARS; i++)
	{
		format(path, 128, "/cars/%i.ini", i);
		if(dini_Exists(path))
		{
		    id = dini_Int(path,"id");
		    color1 = dini_Int(path,"c1");
		    color2 = dini_Int(path,"c2");
			x = dini_Float(path,"x");
			y = dini_Float(path,"y");
			z = dini_Float(path,"z");
			a = dini_Float(path,"a");
			flughafen[i] = dini_Get(path,"airport");
			Plate = dini_Get(path,"plate");
			call[i] = dini_Get(path,"callsign");
		    SetVehicleNumberPlate(CreateVehicle(id, x, y, z, a, color1, color2, 600), Plate);

		}
	}
	return 1;
}

public CreateCar(id, c1, c2, Float:x, Float:y, Float:z, Float:a, plate[])
{
	new path[128];
	for (new i=1; i<MAX_CARS; i++)
	{
	    format(path, 128, "/cars/%i.ini", i);
	    if(!dini_Exists(path))
		{
			dini_Create(path);
		    dini_IntSet(path,"id",id);
		    dini_IntSet(path,"c1",c1);
		    dini_IntSet(path,"c2",c2);
			dini_FloatSet(path,"x",x);
			dini_FloatSet(path,"y",y);
			dini_FloatSet(path,"z",z);
			dini_FloatSet(path,"a",a);
			dini_Set(path,"plate", plate);
			break;
		}
	}
}

public OpenTicket(adminid, targetid)
{
	new name[MAX_PLAYER_NAME], string[128];
	GetPlayerName(adminid, name, MAX_PLAYER_NAME);
	format(string,128,"* Der Admin \"%s\" möchte gerne mit dir sprechen. Hast du einen Moment Zeit? Dann tippe /tchat ein, um mit ihm zu schreiben.", name);
	SendClientMessage(targetid, COLOR_ORANGE, string);
	SetPVarInt(targetid,"ticketid",adminid);
	SetPVarInt(targetid,"ticket",1);
	SetPVarInt(adminid,"ticketid",targetid);
	return 1;
}

public BenzinVerlust()
{
	for(new i=0; i<MAX_VEHICLES; i++)
	{
		if (Motor[i] == true)
		{
			new model = GetVehicleModel(i);
			if(model == 593) Tank[i] = Tank[i]-21/3;
			else if(model == 511) Tank[i] = Tank[i]-15/3;
			else if(model == 553) Tank[i] = Tank[i]-39/3;
			else if(model == 519) Tank[i] = Tank[i]-27/3;
			else if(model == 577) Tank[i] = Tank[i]-39/3;
			else if(model == 592) Tank[i] = Tank[i]-45/3;
			else if(model == 460) Tank[i] = Tank[i]-21/3;
			else if(model == 487) Tank[i] = Tank[i]-27/3;
			else if(model == 469) Tank[i] = Tank[i]-21/3;
			else if(model == 417) Tank[i] = Tank[i]-39/3;
			else Tank[i] = Tank[i]-2;
			if (Tank[i]<1)
			{
				Tank[i] = 0;
				GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(i,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				Motor[i] = false;
			}
		}
	}
	return 1;
}

public Auftanken()
{
    for(new i=0;i<MAX_CARS;i++)
    {
        if(TanktGerade[i] == true)
        {
            new model = GetVehicleModel(i);
            if(model==584)
            {
					Tank[i] = Tank[i] - 10;
					if(Tank[i]<=0)
					{
					    TanktGerade[TankZiel[i]]=false;
					    TanktGerade[i]=false;
					    Tank[i]=0;
					}
			}
            else
			{
				Tank[i] = Tank[i] + 10;
				for(new j=0;j<CAR_LIMIT;j++)
				{
		            if(model == vehicleData[j][0])
		            {
		                if(Tank[i] >= vehicleData[j][1])
		                {
		                    TanktGerade[i] = false;
		                    Tank[i] = vehicleData[j][1];
		                    TanktGerade[TankZiel[i]]=false;
	                 	}
		            }
				}
			}
        }
   		else if(GetVehicleModel(i)==584&&WirdBetankt[i]==true)
		{
			Tank[i] = Tank[i] + 10;
			if(Tank[i]>1000)
			{
				WirdBetankt[i]=false;
				Tank[i]=1000;
			}
		}
    }
    return 1;
}

public StartFlug(playerid, bool:gross, ziel)
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model==592||model==577)
	{
	    if(gate[GetPlayerVehicleID(playerid)] != 0) gatebelegt[gate[GetPlayerVehicleID(playerid)]] = false;
		if(ziel==1)
	    {
     		if(gatebelegt[0] == true && gatebelegt[1] == true && gatebelegt[2] == true) return SendClientMessage(playerid, COLOR_RED, "* In Los Santos sind alle Gates belegt.");
			flugziel[playerid] = 1;
 			ImFlug[playerid] = true;
			cp[playerid] = 1;
			SetPlayerCheckpoint(playerid, checkpoint[5][0], checkpoint[5][1], checkpoint[5][2], 20);
		}
		if(ziel==2)
	    {
	        if(gatebelegt[3] == true && gatebelegt[4] == true) return SendClientMessage(playerid, COLOR_RED, "* In San Fierro sind alle Gates belegt.");
			flugziel[playerid] = 2;
 			ImFlug[playerid] = true;
			cp[playerid] = 1;
			SetPlayerCheckpoint(playerid, checkpoint[6][0], checkpoint[6][1], checkpoint[6][2], 20);
		}
	    if(ziel==3)
	    {
            if(gatebelegt[5] == true && gatebelegt[6] == true && gatebelegt[7] == true) return SendClientMessage(playerid, COLOR_RED, "* In Las Venturas sind alle Gates belegt.");
			flugziel[playerid] = 3;
   			ImFlug[playerid] = true;
			cp[playerid] = 1;
			SetPlayerCheckpoint(playerid, checkpoint[7][0], checkpoint[7][1], checkpoint[7][2], 20);
		}
    	SendClientMessage(playerid, COLOR_GREEN, "Dein Flug wurde erfolgreich gestartet. Bitte folge den Checkpoints!");
  	}
   	else
   	{
	    if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"ls")) SetPlayerCheckpoint(playerid, checkpoint[5][0], checkpoint[5][1], checkpoint[5][2], 20);
	    else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"sf")) SetPlayerCheckpoint(playerid, checkpoint[6][0], checkpoint[6][1], checkpoint[6][2], 20);
	    else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"lv")) SetPlayerCheckpoint(playerid, checkpoint[7][0], checkpoint[7][1], checkpoint[7][2], 20);
	    else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"mt")) SetPlayerCheckpoint(playerid, checkpoint[11][0], checkpoint[11][1], checkpoint[11][2], 20);
	    else if(!strcmp(flughafen[GetPlayerVehicleID(playerid)],"vm")) SetPlayerCheckpoint(playerid, checkpoint[12][0], checkpoint[12][1], checkpoint[12][2], 20);
		else return 0;
		ImFlug[playerid] = true;
		cp[playerid] = 1;
		flugziel[playerid] = ziel;
	    SendClientMessage(playerid, COLOR_GREEN, "Dein Flug wurde erfolgreich gestartet. Bitte folge den Checkpoints!");
   	}
	return 1;
}

public TimeTimer()
{
	if(time < 24)
	{
		SetWorldTime(time);
		time++;
	}
	else
	{
	    SetWorldTime(1);
	    time = 1;
	}
	return 1;
}

public WeatherTimer()
{
	SetTimer("WeatherTimer", RandomEx(300000, 500000), false);
	SetWeather(random(20));
}

public RandomEx(min, max)
{
	return random(min) + max - min;
}

public IsPlayerInRangeOfVehicleModel(playerid, Float:range, vehiclemodel)
{
	for(new i=0;i<MAX_VEHICLES;i++)
	{
		if(GetVehicleModel(i) == vehiclemodel)
		{
		    new Float:x, Float:y, Float:z;
		    GetVehiclePos(i, x, y, z);
		    if(IsPlayerInRangeOfPoint(playerid, range, x, y, z)) return 1;
		}
	}
	return 0;
}

public GivePlayerReward(playerid, money, score)
{
	GivePlayerMoney(playerid, money);
	SetPlayerScoreEx(playerid, GetPVarInt(playerid,"points")+score);
	if(GetPlayerScore(playerid) == 15) ShowAchievement(playerid, "Das war\'s schon?", "Erreiche Level 2", "~r~Beagle ~w~& ~r~Sparrow ~w~ freigeschaltet~n~+ ~g~200$", 200, 1);
	if(GetPlayerScore(playerid) == 30) ShowAchievement(playerid, "Das ging ebenso schnell...", "Erreiche Level 3", "~r~Nevada~w~ freigeschaltet~n~+ ~g~200$", 200, 1);
	if(GetPlayerScore(playerid) == 40) ShowAchievement(playerid, "", "Erreiche Level 4", "~r~Levethian~w~ freigeschaltet~n~+~g~ 200$", 200, 1);
	if(GetPlayerScore(playerid) == 60) ShowAchievement(playerid, "Langsam geht's los.", "Erreiche Level 5", "~r~Shamal~w~ freigeschaltet~n~+ ~g~200$",200,1);
	if(GetPlayerScore(playerid) == 80) ShowAchievement(playerid, "Die grossen Brummer warten...", "Erreiche Level 6", "~r~Andromada~w~ freigeschaltet~n~+ ~g~300$",300,1);
	if(GetPlayerScore(playerid) == 110) ShowAchievement(playerid, "Ich bin fast fertig.", "Erreiche das letzte Level", "~r~AT-400 ~w~freigeschaltet~n~+~g~1000$",1000,1);
	if(GetPlayerMoney(playerid) == 10000) ShowAchievement(playerid, "Ich bin reich!", "Erhalte 10.000$ auf deinem Weg", "~g~2 Punkte", 0, 2);
	return 1;
}

public ShowAchievement(playerid, title[], description[], rewardtext[], rewardmoney, rewardscore)
{
	GivePlayerReward(playerid, rewardmoney, rewardscore);
	TextDrawSetString(atitle[playerid], title);
	TextDrawSetString(adescription[playerid], description);
	TextDrawSetString(areward[playerid], rewardtext);
	TextDrawShowForPlayer(playerid, atitle[playerid]);
	TextDrawShowForPlayer(playerid, adescription[playerid]);
	TextDrawShowForPlayer(playerid, areward[playerid]);
	SetTimerEx("AchievementShowTimer", 10000, false, "i", playerid);
	return 1;
}

public AchievementShowTimer(playerid)
{
	TextDrawSetString(atitle[playerid], " ");
	TextDrawSetString(adescription[playerid], " ");
	TextDrawSetString(areward[playerid], " ");
	TextDrawHideForPlayer(playerid, atitle[playerid]);
	TextDrawHideForPlayer(playerid, adescription[playerid]);
	TextDrawHideForPlayer(playerid, areward[playerid]);
	return 1;
}

public PrepareTextDraws(playerid)
{
	atitle[playerid] = TextDrawCreate(20.0,100.0," ");
	TextDrawSetProportional(atitle[playerid], true);
	TextDrawLetterSize(atitle[playerid], 0.5, 1.0);
	TextDrawSetOutline(atitle[playerid], 1);
	TextDrawSetShadow(atitle[playerid], 1);
	TextDrawFont(atitle[playerid], 0);

	adescription[playerid] = TextDrawCreate(25.0,115.0," ");
	TextDrawSetOutline(adescription[playerid], 1);
	TextDrawSetShadow(adescription[playerid], 0);
	TextDrawFont(adescription[playerid], 1);
	TextDrawSetProportional(adescription[playerid], true);
	TextDrawLetterSize(adescription[playerid], 0.3, 0.8);

	areward[playerid] = TextDrawCreate(25.0,125.0," ");
	TextDrawSetOutline(areward[playerid], 1);
	TextDrawSetShadow(areward[playerid], 0);
	TextDrawFont(areward[playerid], 1);
	TextDrawSetProportional(areward[playerid], true);
	TextDrawLetterSize(areward[playerid], 0.3, 0.8);

	vehiclename[playerid] = TextDrawCreate(630.0,360.0," ");
	TextDrawSetOutline(vehiclename[playerid], 1);
	TextDrawAlignment(vehiclename[playerid], 3);
	TextDrawFont(vehiclename[playerid], 2);
	TextDrawSetShadow(vehiclename[playerid], 1);

	inhalt[playerid] = TextDrawCreate(630.0,375.0," ");
	TextDrawSetOutline(inhalt[playerid], 1);
	TextDrawAlignment(inhalt[playerid], 3);
	TextDrawSetShadow(inhalt[playerid], 0);

	speed[playerid] = TextDrawCreate(630.0,390.0," ");
	TextDrawSetOutline(speed[playerid], 1);
	TextDrawAlignment(speed[playerid], 3);
	TextDrawSetShadow(speed[playerid], 0);

	callsign[playerid] = TextDrawCreate(10.0,425.0," ");
	TextDrawSetOutline(callsign[playerid], 1);
	TextDrawAlignment(callsign[playerid], 1);
	TextDrawSetShadow(callsign[playerid], 0);

	repair[playerid] = TextDrawCreate(630.0,410.0," ");
	TextDrawSetOutline(repair[playerid], 1);
	TextDrawAlignment(repair[playerid], 3);
	TextDrawSetShadow(repair[playerid], 0);

	motor[playerid] = TextDrawCreate(485.0,410.0," ");
	TextDrawSetOutline(motor[playerid], 1);
	TextDrawAlignment(motor[playerid], 3);
	TextDrawSetShadow(motor[playerid], 0);

	kmstand[playerid] = TextDrawCreate(630.0,425.0," ");
	TextDrawSetOutline(kmstand[playerid], 1);
	TextDrawAlignment(kmstand[playerid], 3);
	TextDrawSetShadow(kmstand[playerid], 0);
	return 1;
}

stock ReturnNearestCar(playerid,Float:range)
{
	new Float:x, Float:y, Float:z, d=-1, model;
	for(new i=0;i<MAX_CARS;i++)
	{
	    model = GetVehicleModel(i);
	    if(model!=514 && model!=584 && model!=407 && model!=416 && model!=599 && model!=490 && model!=596 && model!=608 && model!=485 && model!=607 && model!=611)
	    {
			GetVehiclePos(i, x, y, z);
		    if(IsPlayerInRangeOfPoint(playerid, range, x, y, z)) return i;
	    }
	}
	return d;
}

stock IsPlayerInAnyAircraft(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new model;
		model = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(model==593||model==511||model==553||model==519||model==577||model==592||model==460||model==487||model==469||model==417) return 1;
		else return 0;
	}
	else return 0;
}

stock IsPlayerAllowedForVehicle(playerid)
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid)), point = GetPlayerScore(playerid);
	if(IsPlayerInAnyAircraft(playerid) && GetPlayerSkin(playerid) != 61) return 0;
	else if(!IsPlayerInAnyAircraft(playerid) && GetPlayerSkin(playerid) != 16) return 0;
	else if((model==511||model==469) && point < 15) return 0;
	else if(model==553 && point < 30) return 0;
	else if(model==417 && point < 40) return 0;
	else if(model==519 && point < 60) return 0;
	else if(model==592 && point < 80) return 0;
	else if(model==577 && point < 110) return 0;
	else return 1;
}

stock Connect_To_Database()
{
    mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS);
	if(mysql_ping() == 1)
    {
		print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        return true;
    }
    else
    {
        print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        print("<-| [MYSQL] Es wird erneut versucht eine Verbindung zur Datenbank herzustellen!");
        mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS);
        if(mysql_ping() == 1)
        {
            print("<-| [MYSQL] Es konnte im 2 Versuch eine Verbindung hergestellt werden!");
            return true;
        }
        else
        {
            print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
            print("<-| [MYSQL] Der Server wird nun beendet!");
            SendRconCommand("exit");
            return true;
        }
    }
}

stock mysql_CheckAccount(playerid)
{
    new Query[128],Name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
    mysql_real_escape_string(Name, Name);
    format(Query, sizeof(Query), "SELECT * FROM benutzer WHERE Name = '%s'", Name);
    mysql_query(Query);
    mysql_store_result();
    return mysql_num_rows();
}

stock CreateAccount(playerid, pass[])
{
    new query[256],Name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
    mysql_real_escape_string(Name,Name);
    mysql_real_escape_string(pass,pass);
    format(query, sizeof(query), "INSERT INTO benutzer (Name, Passwort) VALUES ('%s', '%s')", Name, pass);
    mysql_query(query);
    return true;
}

stock SendTicket(playerid, title[], text[])
{
    new query[256],Name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
    mysql_real_escape_string(Name,Name);
    mysql_real_escape_string(title,title);
    mysql_real_escape_string(text,text);
    format(query, sizeof(query), "INSERT INTO tickets (Name, Titel, Text) VALUES ('%s', '%s', '%s')", Name, title, text);
    mysql_query(query);
    return true;
}

stock mysql_ReturnPasswort(Name[])
{
    new query[130], Get[130];
    mysql_real_escape_string(Name, Name);
    format(query, 128, "SELECT Passwort FROM benutzer WHERE Name = '%s'", Name);
    mysql_query(query);
    mysql_store_result();
    mysql_fetch_row(Get);
    mysql_free_result();
    return Get;
}

stock mysql_GetInt(Table[], Field[], Where[], Is[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT %s FROM %s WHERE %s = '%s'", Field, Table, Where, Is);
    mysql_query(query);
    mysql_store_result();
    new sqlint = mysql_fetch_int();
    mysql_free_result();
    return sqlint;
}

stock mysql_GetString(Table[], Field[], Where[], Is[])
{
    new query[128], Get[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT %s FROM %s WHERE %s = '%s'", Field, Table, Where, Is);
    mysql_query(query);
    mysql_store_result();
    mysql_fetch_row(Get);
    return Get;
}

stock mysql_SetFloat(Table[], Field[], Float:To, Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE %s SET %s = '%.1f' WHERE %s = '%s'", Table, Field, To, Where, Where2);
    mysql_query(query);
    return true;
}

stock SavePlayer(playerid)
{
    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
	{
        if(GetPVarInt(playerid,"Eingeloggt") == 1)
		{
		    new Name[MAX_PLAYER_NAME];
		    GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
            mysql_SetInt("benutzer", "Cash", GetPlayerMoney(playerid), "Name", Name);
            mysql_SetInt("benutzer", "Points", GetPlayerScore(playerid), "Name", Name);
        }
    }
    return 1;
}

stock LoadPlayer(playerid)
{
    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
	{
	    new Name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,Name,MAX_PLAYER_NAME);
        SetPVarInt(playerid,"money",mysql_GetInt("benutzer", "Cash", "Name", Name));
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, GetPVarInt(playerid, "money"));
        SetPVarInt(playerid,"points",mysql_GetInt("benutzer", "Points", "Name", Name));
        SetPlayerScoreEx(playerid,GetPVarInt(playerid,"points"));
        SetPVarInt(playerid,"admin",mysql_GetInt("benutzer", "Adminlvl", "Name", Name));
        SetPVarString(playerid,"heimat",mysql_GetString("benutzer", "Heimat", "Name", Name));
    }
    return 1;
}

stock RemovePlayer(playerid)
{
    new Name[MAX_PLAYER_NAME], query[128];
    GetPlayerName(playerid,Name,MAX_PLAYER_NAME);
    mysql_real_escape_string(Name, Name);
    format(query, 128, "DELETE FROM benutzer WHERE Name = '%s'", Name);
    mysql_query(query);
	return true;
}

stock mysql_SetInt(Table[], Field[], To, Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE %s SET %s = '%d' WHERE %s = '%s'", Table, Field, To, Where, Where2);
    mysql_query(query);
    return true;
}

stock mysql_SetString(Table[], Field[], To[], Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(To, To);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE %s SET %s = '%s' WHERE %s = '%s'", Table, Field, To, Where, Where2);
    mysql_query(query);
    return true;
}

stock RangeBan(playerid)
{
  if(!IsPlayerConnected(playerid)) return 0;
  new total[16],ip[16], string[24];
  GetPlayerIp(playerid, ip, sizeof(ip));
  new cnt;
  for(new i=0;i<strlen(ip);i++)
  {
    if(ip[i] == '.') cnt++;
    if(cnt == 2)
    {
      i++;
      strdel(ip, i, strlen(ip));
      format(total,sizeof(total),"%s*.*",ip);
    }
  }
  format(string, sizeof(string),"banip %s",total);
  SendRconCommand(string);
  return 1;
}

stock SetPlayerScoreEx(playerid, score)
{
	new Year, Month, Day, Hour, Minute, Second, Name[MAX_PLAYER_NAME], logtext[128], logtxt[256];
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	GetPlayerName(playerid,Name,MAX_PLAYER_NAME);
	format(logtext,128,"/Logs/%s-Log.txt",Name);
	new File:log = fopen(logtext, io_append);
	if(GetPlayerSkin(playerid)==16) format(logtxt,128,"[%02d.%02d.][%02d:%02d:%02d]: %i Punkte (Boden)\r\n",Day,Month,Hour,Minute,Second,score);
	if(GetPlayerSkin(playerid)==61) format(logtxt,128,"[%02d.%02d.][%02d:%02d:%02d]: %i Punkte (Flug)\r\n",Day,Month,Hour,Minute,Second,score);
	fwrite(log, logtxt);
	fclose(log);
	SetPVarInt(playerid,"points",score);
	SetPlayerScore(playerid,score);
	return 1;
}

public points()
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(GetPVarInt(i,"points")!=GetPlayerScore(i))
		{
			new Year, Month, Day, Hour, Minute, Second, Name[MAX_PLAYER_NAME], logtext[128], logtxt[256];
			getdate(Year, Month, Day);
			gettime(Hour, Minute, Second);
			GetPlayerName(i,Name,MAX_PLAYER_NAME);
			format(logtext,128,"/Logs/%s-Log.txt",Name);
			new File:log = fopen(logtext, io_append);
			format(logtxt,128,"[%02d.%02d.][%02d:%02d:%02d]: - Scorehack erkannt -\r\n",Day,Month,Hour,Minute,Second,GetPlayerScore(i));
			fwrite(log, logtxt);
			fclose(log);
			SendTicket(i,"Scorehack erkannt","Bei mir wurde ein Scorehack erkannt. Ich bitte dies zu überprüfen.");
		    SetPlayerScore(i, GetPVarInt(i,"points"));
		}
	}
	return 1;
}

public Reward(playerid)
{
	if(GetPlayerSkin(playerid)==16)
	{
	    BodenReward[playerid]++;
	    if(BodenReward[playerid]==3)
	    {
	        BodenReward[playerid]=0;
	        GivePlayerReward(playerid,50,1);
	    }
	}
}

public fcreate(filename[])
{
    if (fexist(filename)){return false;}
    new File:fhandle = fopen(filename,io_write);
    fwrite(fhandle,"Logfile erstellt und gestartet.");
    fclose(fhandle);
    return true;
}
